// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace amd {
PROTOBUF_CONSTEXPR StreamPCMRequest_Metadata::StreamPCMRequest_Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_id_)*/int64_t{0}
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamPCMRequest_MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPCMRequest_MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPCMRequest_MetadataDefaultTypeInternal() {}
  union {
    StreamPCMRequest_Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPCMRequest_MetadataDefaultTypeInternal _StreamPCMRequest_Metadata_default_instance_;
PROTOBUF_CONSTEXPR StreamPCMRequest::StreamPCMRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StreamPCMRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPCMRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPCMRequestDefaultTypeInternal() {}
  union {
    StreamPCMRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPCMRequestDefaultTypeInternal _StreamPCMRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamPCMResponse::StreamPCMResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamPCMResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPCMResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPCMResponseDefaultTypeInternal() {}
  union {
    StreamPCMResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPCMResponseDefaultTypeInternal _StreamPCMResponse_default_instance_;
}  // namespace amd
static ::_pb::Metadata file_level_metadata_stream_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_stream_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stream_2eproto = nullptr;

const uint32_t TableStruct_stream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _impl_.domain_id_),
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest_Metadata, _impl_.sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::amd::StreamPCMResponse, _impl_.results_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::amd::StreamPCMRequest_Metadata)},
  { 11, -1, -1, sizeof(::amd::StreamPCMRequest)},
  { 20, -1, -1, sizeof(::amd::StreamPCMResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::amd::_StreamPCMRequest_Metadata_default_instance_._instance,
  &::amd::_StreamPCMRequest_default_instance_._instance,
  &::amd::_StreamPCMResponse_default_instance_._instance,
};

const char descriptor_table_protodef_stream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014stream.proto\022\003amd\"\302\001\n\020StreamPCMRequest"
  "\0222\n\010metadata\030\001 \001(\0132\036.amd.StreamPCMReques"
  "t.MetadataH\000\022\017\n\005chunk\030\002 \001(\014H\000\032a\n\010Metadat"
  "a\022\021\n\tdomain_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\021\n\tmi"
  "me_type\030\003 \001(\t\022\014\n\004uuid\030\004 \001(\t\022\023\n\013sample_ra"
  "te\030\005 \001(\005B\006\n\004data\"4\n\021StreamPCMResponse\022\016\n"
  "\006result\030\001 \001(\t\022\017\n\007results\030\002 \003(\t*3\n\020Upload"
  "StatusCode\022\013\n\007Unknown\020\000\022\006\n\002Ok\020\001\022\n\n\006Faile"
  "d\020\0022G\n\003Api\022@\n\tStreamPCM\022\025.amd.StreamPCMR"
  "equest\032\026.amd.StreamPCMResponse\"\000(\0010\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_stream_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stream_2eproto = {
    false, false, 404, descriptor_table_protodef_stream_2eproto,
    "stream.proto",
    &descriptor_table_stream_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_stream_2eproto::offsets,
    file_level_metadata_stream_2eproto, file_level_enum_descriptors_stream_2eproto,
    file_level_service_descriptors_stream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stream_2eproto_getter() {
  return &descriptor_table_stream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stream_2eproto(&descriptor_table_stream_2eproto);
namespace amd {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stream_2eproto);
  return file_level_enum_descriptors_stream_2eproto[0];
}
bool UploadStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StreamPCMRequest_Metadata::_Internal {
 public:
};

StreamPCMRequest_Metadata::StreamPCMRequest_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:amd.StreamPCMRequest.Metadata)
}
StreamPCMRequest_Metadata::StreamPCMRequest_Metadata(const StreamPCMRequest_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPCMRequest_Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.domain_id_){}
    , decltype(_impl_.sample_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.domain_id_, &from._impl_.domain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sample_rate_) -
    reinterpret_cast<char*>(&_impl_.domain_id_)) + sizeof(_impl_.sample_rate_));
  // @@protoc_insertion_point(copy_constructor:amd.StreamPCMRequest.Metadata)
}

inline void StreamPCMRequest_Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.domain_id_){int64_t{0}}
    , decltype(_impl_.sample_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamPCMRequest_Metadata::~StreamPCMRequest_Metadata() {
  // @@protoc_insertion_point(destructor:amd.StreamPCMRequest.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPCMRequest_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.uuid_.Destroy();
}

void StreamPCMRequest_Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPCMRequest_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:amd.StreamPCMRequest.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  ::memset(&_impl_.domain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sample_rate_) -
      reinterpret_cast<char*>(&_impl_.domain_id_)) + sizeof(_impl_.sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPCMRequest_Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 domain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.domain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "amd.StreamPCMRequest.Metadata.name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "amd.StreamPCMRequest.Metadata.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "amd.StreamPCMRequest.Metadata.uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamPCMRequest_Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amd.StreamPCMRequest.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 domain_id = 1;
  if (this->_internal_domain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_domain_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amd.StreamPCMRequest.Metadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amd.StreamPCMRequest.Metadata.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // string uuid = 4;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amd.StreamPCMRequest.Metadata.uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  // int32 sample_rate = 5;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amd.StreamPCMRequest.Metadata)
  return target;
}

size_t StreamPCMRequest_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amd.StreamPCMRequest.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 3;
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string uuid = 4;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // int64 domain_id = 1;
  if (this->_internal_domain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_domain_id());
  }

  // int32 sample_rate = 5;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPCMRequest_Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPCMRequest_Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPCMRequest_Metadata::GetClassData() const { return &_class_data_; }


void StreamPCMRequest_Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPCMRequest_Metadata*>(&to_msg);
  auto& from = static_cast<const StreamPCMRequest_Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:amd.StreamPCMRequest.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_domain_id() != 0) {
    _this->_internal_set_domain_id(from._internal_domain_id());
  }
  if (from._internal_sample_rate() != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPCMRequest_Metadata::CopyFrom(const StreamPCMRequest_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amd.StreamPCMRequest.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPCMRequest_Metadata::IsInitialized() const {
  return true;
}

void StreamPCMRequest_Metadata::InternalSwap(StreamPCMRequest_Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamPCMRequest_Metadata, _impl_.sample_rate_)
      + sizeof(StreamPCMRequest_Metadata::_impl_.sample_rate_)
      - PROTOBUF_FIELD_OFFSET(StreamPCMRequest_Metadata, _impl_.domain_id_)>(
          reinterpret_cast<char*>(&_impl_.domain_id_),
          reinterpret_cast<char*>(&other->_impl_.domain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPCMRequest_Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[0]);
}

// ===================================================================

class StreamPCMRequest::_Internal {
 public:
  static const ::amd::StreamPCMRequest_Metadata& metadata(const StreamPCMRequest* msg);
};

const ::amd::StreamPCMRequest_Metadata&
StreamPCMRequest::_Internal::metadata(const StreamPCMRequest* msg) {
  return *msg->_impl_.data_.metadata_;
}
void StreamPCMRequest::set_allocated_metadata(::amd::StreamPCMRequest_Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
    _impl_.data_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.metadata)
}
StreamPCMRequest::StreamPCMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:amd.StreamPCMRequest)
}
StreamPCMRequest::StreamPCMRequest(const StreamPCMRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPCMRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kMetadata: {
      _this->_internal_mutable_metadata()->::amd::StreamPCMRequest_Metadata::MergeFrom(
          from._internal_metadata());
      break;
    }
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:amd.StreamPCMRequest)
}

inline void StreamPCMRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

StreamPCMRequest::~StreamPCMRequest() {
  // @@protoc_insertion_point(destructor:amd.StreamPCMRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPCMRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void StreamPCMRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPCMRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:amd.StreamPCMRequest)
  switch (data_case()) {
    case kMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.metadata_;
      }
      break;
    }
    case kChunk: {
      _impl_.data_.chunk_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void StreamPCMRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:amd.StreamPCMRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPCMRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .amd.StreamPCMRequest.Metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamPCMRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amd.StreamPCMRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .amd.StreamPCMRequest.Metadata metadata = 1;
  if (_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // bytes chunk = 2;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amd.StreamPCMRequest)
  return target;
}

size_t StreamPCMRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amd.StreamPCMRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .amd.StreamPCMRequest.Metadata metadata = 1;
    case kMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.metadata_);
      break;
    }
    // bytes chunk = 2;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPCMRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPCMRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPCMRequest::GetClassData() const { return &_class_data_; }


void StreamPCMRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPCMRequest*>(&to_msg);
  auto& from = static_cast<const StreamPCMRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:amd.StreamPCMRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kMetadata: {
      _this->_internal_mutable_metadata()->::amd::StreamPCMRequest_Metadata::MergeFrom(
          from._internal_metadata());
      break;
    }
    case kChunk: {
      _this->_internal_set_chunk(from._internal_chunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPCMRequest::CopyFrom(const StreamPCMRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amd.StreamPCMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPCMRequest::IsInitialized() const {
  return true;
}

void StreamPCMRequest::InternalSwap(StreamPCMRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPCMRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[1]);
}

// ===================================================================

class StreamPCMResponse::_Internal {
 public:
};

StreamPCMResponse::StreamPCMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:amd.StreamPCMResponse)
}
StreamPCMResponse::StreamPCMResponse(const StreamPCMResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPCMResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:amd.StreamPCMResponse)
}

inline void StreamPCMResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamPCMResponse::~StreamPCMResponse() {
  // @@protoc_insertion_point(destructor:amd.StreamPCMResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPCMResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.result_.Destroy();
}

void StreamPCMResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPCMResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:amd.StreamPCMResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPCMResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "amd.StreamPCMResponse.result"));
        } else
          goto handle_unusual;
        continue;
      // repeated string results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_results();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "amd.StreamPCMResponse.results"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamPCMResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amd.StreamPCMResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amd.StreamPCMResponse.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  // repeated string results = 2;
  for (int i = 0, n = this->_internal_results_size(); i < n; i++) {
    const auto& s = this->_internal_results(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amd.StreamPCMResponse.results");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amd.StreamPCMResponse)
  return target;
}

size_t StreamPCMResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amd.StreamPCMResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string results = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.results_.size());
  for (int i = 0, n = _impl_.results_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.results_.Get(i));
  }

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPCMResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPCMResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPCMResponse::GetClassData() const { return &_class_data_; }


void StreamPCMResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPCMResponse*>(&to_msg);
  auto& from = static_cast<const StreamPCMResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:amd.StreamPCMResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPCMResponse::CopyFrom(const StreamPCMResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amd.StreamPCMResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPCMResponse::IsInitialized() const {
  return true;
}

void StreamPCMResponse::InternalSwap(StreamPCMResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPCMResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace amd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amd::StreamPCMRequest_Metadata*
Arena::CreateMaybeMessage< ::amd::StreamPCMRequest_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amd::StreamPCMRequest_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::amd::StreamPCMRequest*
Arena::CreateMaybeMessage< ::amd::StreamPCMRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amd::StreamPCMRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::amd::StreamPCMResponse*
Arena::CreateMaybeMessage< ::amd::StreamPCMResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::amd::StreamPCMResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
