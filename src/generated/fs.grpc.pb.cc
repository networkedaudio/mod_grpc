// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fs.proto

#include "fs.pb.h"
#include "fs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fs {

static const char* Api_method_names[] = {
  "/fs.Api/Originate",
  "/fs.Api/Execute",
  "/fs.Api/SetVariables",
  "/fs.Api/Bridge",
  "/fs.Api/BridgeCall",
  "/fs.Api/StopPlayback",
  "/fs.Api/Hangup",
  "/fs.Api/HangupMatchingVars",
  "/fs.Api/Queue",
  "/fs.Api/HangupMany",
  "/fs.Api/Hold",
  "/fs.Api/UnHold",
  "/fs.Api/SetProfileVar",
  "/fs.Api/ConfirmPush",
  "/fs.Api/Broadcast",
  "/fs.Api/SetEavesdropState",
  "/fs.Api/BlindTransfer",
};

std::unique_ptr< Api::Stub> Api::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Api::Stub> stub(new Api::Stub(channel, options));
  return stub;
}

Api::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Originate_(Api_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(Api_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVariables_(Api_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Bridge_(Api_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BridgeCall_(Api_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPlayback_(Api_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hangup_(Api_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HangupMatchingVars_(Api_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Queue_(Api_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HangupMany_(Api_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hold_(Api_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnHold_(Api_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileVar_(Api_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmPush_(Api_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(Api_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEavesdropState_(Api_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlindTransfer_(Api_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Api::Stub::Originate(::grpc::ClientContext* context, const ::fs::OriginateRequest& request, ::fs::OriginateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::OriginateRequest, ::fs::OriginateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Originate_, context, request, response);
}

void Api::Stub::async::Originate(::grpc::ClientContext* context, const ::fs::OriginateRequest* request, ::fs::OriginateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::OriginateRequest, ::fs::OriginateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Originate_, context, request, response, std::move(f));
}

void Api::Stub::async::Originate(::grpc::ClientContext* context, const ::fs::OriginateRequest* request, ::fs::OriginateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Originate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::OriginateResponse>* Api::Stub::PrepareAsyncOriginateRaw(::grpc::ClientContext* context, const ::fs::OriginateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::OriginateResponse, ::fs::OriginateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Originate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::OriginateResponse>* Api::Stub::AsyncOriginateRaw(::grpc::ClientContext* context, const ::fs::OriginateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOriginateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Execute(::grpc::ClientContext* context, const ::fs::ExecuteRequest& request, ::fs::ExecuteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::ExecuteRequest, ::fs::ExecuteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void Api::Stub::async::Execute(::grpc::ClientContext* context, const ::fs::ExecuteRequest* request, ::fs::ExecuteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::ExecuteRequest, ::fs::ExecuteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void Api::Stub::async::Execute(::grpc::ClientContext* context, const ::fs::ExecuteRequest* request, ::fs::ExecuteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::ExecuteResponse>* Api::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::fs::ExecuteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::ExecuteResponse, ::fs::ExecuteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Execute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::ExecuteResponse>* Api::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::fs::ExecuteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::SetVariables(::grpc::ClientContext* context, const ::fs::SetVariablesRequest& request, ::fs::SetVariablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::SetVariablesRequest, ::fs::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVariables_, context, request, response);
}

void Api::Stub::async::SetVariables(::grpc::ClientContext* context, const ::fs::SetVariablesRequest* request, ::fs::SetVariablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::SetVariablesRequest, ::fs::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, std::move(f));
}

void Api::Stub::async::SetVariables(::grpc::ClientContext* context, const ::fs::SetVariablesRequest* request, ::fs::SetVariablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVariables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::SetVariablesResponse>* Api::Stub::PrepareAsyncSetVariablesRaw(::grpc::ClientContext* context, const ::fs::SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::SetVariablesResponse, ::fs::SetVariablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVariables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::SetVariablesResponse>* Api::Stub::AsyncSetVariablesRaw(::grpc::ClientContext* context, const ::fs::SetVariablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVariablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Bridge(::grpc::ClientContext* context, const ::fs::BridgeRequest& request, ::fs::BridgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::BridgeRequest, ::fs::BridgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Bridge_, context, request, response);
}

void Api::Stub::async::Bridge(::grpc::ClientContext* context, const ::fs::BridgeRequest* request, ::fs::BridgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::BridgeRequest, ::fs::BridgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bridge_, context, request, response, std::move(f));
}

void Api::Stub::async::Bridge(::grpc::ClientContext* context, const ::fs::BridgeRequest* request, ::fs::BridgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bridge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::BridgeResponse>* Api::Stub::PrepareAsyncBridgeRaw(::grpc::ClientContext* context, const ::fs::BridgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::BridgeResponse, ::fs::BridgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Bridge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::BridgeResponse>* Api::Stub::AsyncBridgeRaw(::grpc::ClientContext* context, const ::fs::BridgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBridgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::BridgeCall(::grpc::ClientContext* context, const ::fs::BridgeCallRequest& request, ::fs::BridgeCallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::BridgeCallRequest, ::fs::BridgeCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BridgeCall_, context, request, response);
}

void Api::Stub::async::BridgeCall(::grpc::ClientContext* context, const ::fs::BridgeCallRequest* request, ::fs::BridgeCallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::BridgeCallRequest, ::fs::BridgeCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BridgeCall_, context, request, response, std::move(f));
}

void Api::Stub::async::BridgeCall(::grpc::ClientContext* context, const ::fs::BridgeCallRequest* request, ::fs::BridgeCallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BridgeCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::BridgeCallResponse>* Api::Stub::PrepareAsyncBridgeCallRaw(::grpc::ClientContext* context, const ::fs::BridgeCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::BridgeCallResponse, ::fs::BridgeCallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BridgeCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::BridgeCallResponse>* Api::Stub::AsyncBridgeCallRaw(::grpc::ClientContext* context, const ::fs::BridgeCallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBridgeCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::StopPlayback(::grpc::ClientContext* context, const ::fs::StopPlaybackRequest& request, ::fs::StopPlaybackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::StopPlaybackRequest, ::fs::StopPlaybackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPlayback_, context, request, response);
}

void Api::Stub::async::StopPlayback(::grpc::ClientContext* context, const ::fs::StopPlaybackRequest* request, ::fs::StopPlaybackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::StopPlaybackRequest, ::fs::StopPlaybackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayback_, context, request, response, std::move(f));
}

void Api::Stub::async::StopPlayback(::grpc::ClientContext* context, const ::fs::StopPlaybackRequest* request, ::fs::StopPlaybackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::StopPlaybackResponse>* Api::Stub::PrepareAsyncStopPlaybackRaw(::grpc::ClientContext* context, const ::fs::StopPlaybackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::StopPlaybackResponse, ::fs::StopPlaybackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPlayback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::StopPlaybackResponse>* Api::Stub::AsyncStopPlaybackRaw(::grpc::ClientContext* context, const ::fs::StopPlaybackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPlaybackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Hangup(::grpc::ClientContext* context, const ::fs::HangupRequest& request, ::fs::HangupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::HangupRequest, ::fs::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hangup_, context, request, response);
}

void Api::Stub::async::Hangup(::grpc::ClientContext* context, const ::fs::HangupRequest* request, ::fs::HangupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::HangupRequest, ::fs::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hangup_, context, request, response, std::move(f));
}

void Api::Stub::async::Hangup(::grpc::ClientContext* context, const ::fs::HangupRequest* request, ::fs::HangupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hangup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupResponse>* Api::Stub::PrepareAsyncHangupRaw(::grpc::ClientContext* context, const ::fs::HangupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::HangupResponse, ::fs::HangupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hangup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupResponse>* Api::Stub::AsyncHangupRaw(::grpc::ClientContext* context, const ::fs::HangupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHangupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::HangupMatchingVars(::grpc::ClientContext* context, const ::fs::HangupMatchingVarsReqeust& request, ::fs::HangupMatchingVarsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::HangupMatchingVarsReqeust, ::fs::HangupMatchingVarsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HangupMatchingVars_, context, request, response);
}

void Api::Stub::async::HangupMatchingVars(::grpc::ClientContext* context, const ::fs::HangupMatchingVarsReqeust* request, ::fs::HangupMatchingVarsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::HangupMatchingVarsReqeust, ::fs::HangupMatchingVarsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HangupMatchingVars_, context, request, response, std::move(f));
}

void Api::Stub::async::HangupMatchingVars(::grpc::ClientContext* context, const ::fs::HangupMatchingVarsReqeust* request, ::fs::HangupMatchingVarsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HangupMatchingVars_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupMatchingVarsResponse>* Api::Stub::PrepareAsyncHangupMatchingVarsRaw(::grpc::ClientContext* context, const ::fs::HangupMatchingVarsReqeust& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::HangupMatchingVarsResponse, ::fs::HangupMatchingVarsReqeust, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HangupMatchingVars_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupMatchingVarsResponse>* Api::Stub::AsyncHangupMatchingVarsRaw(::grpc::ClientContext* context, const ::fs::HangupMatchingVarsReqeust& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHangupMatchingVarsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Queue(::grpc::ClientContext* context, const ::fs::QueueRequest& request, ::fs::QueueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::QueueRequest, ::fs::QueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Queue_, context, request, response);
}

void Api::Stub::async::Queue(::grpc::ClientContext* context, const ::fs::QueueRequest* request, ::fs::QueueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::QueueRequest, ::fs::QueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Queue_, context, request, response, std::move(f));
}

void Api::Stub::async::Queue(::grpc::ClientContext* context, const ::fs::QueueRequest* request, ::fs::QueueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Queue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::QueueResponse>* Api::Stub::PrepareAsyncQueueRaw(::grpc::ClientContext* context, const ::fs::QueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::QueueResponse, ::fs::QueueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Queue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::QueueResponse>* Api::Stub::AsyncQueueRaw(::grpc::ClientContext* context, const ::fs::QueueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::HangupMany(::grpc::ClientContext* context, const ::fs::HangupManyRequest& request, ::fs::HangupManyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::HangupManyRequest, ::fs::HangupManyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HangupMany_, context, request, response);
}

void Api::Stub::async::HangupMany(::grpc::ClientContext* context, const ::fs::HangupManyRequest* request, ::fs::HangupManyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::HangupManyRequest, ::fs::HangupManyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HangupMany_, context, request, response, std::move(f));
}

void Api::Stub::async::HangupMany(::grpc::ClientContext* context, const ::fs::HangupManyRequest* request, ::fs::HangupManyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HangupMany_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupManyResponse>* Api::Stub::PrepareAsyncHangupManyRaw(::grpc::ClientContext* context, const ::fs::HangupManyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::HangupManyResponse, ::fs::HangupManyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HangupMany_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::HangupManyResponse>* Api::Stub::AsyncHangupManyRaw(::grpc::ClientContext* context, const ::fs::HangupManyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHangupManyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Hold(::grpc::ClientContext* context, const ::fs::HoldRequest& request, ::fs::HoldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::HoldRequest, ::fs::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hold_, context, request, response);
}

void Api::Stub::async::Hold(::grpc::ClientContext* context, const ::fs::HoldRequest* request, ::fs::HoldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::HoldRequest, ::fs::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hold_, context, request, response, std::move(f));
}

void Api::Stub::async::Hold(::grpc::ClientContext* context, const ::fs::HoldRequest* request, ::fs::HoldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::HoldResponse>* Api::Stub::PrepareAsyncHoldRaw(::grpc::ClientContext* context, const ::fs::HoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::HoldResponse, ::fs::HoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::HoldResponse>* Api::Stub::AsyncHoldRaw(::grpc::ClientContext* context, const ::fs::HoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::UnHold(::grpc::ClientContext* context, const ::fs::UnHoldRequest& request, ::fs::UnHoldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::UnHoldRequest, ::fs::UnHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnHold_, context, request, response);
}

void Api::Stub::async::UnHold(::grpc::ClientContext* context, const ::fs::UnHoldRequest* request, ::fs::UnHoldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::UnHoldRequest, ::fs::UnHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnHold_, context, request, response, std::move(f));
}

void Api::Stub::async::UnHold(::grpc::ClientContext* context, const ::fs::UnHoldRequest* request, ::fs::UnHoldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::UnHoldResponse>* Api::Stub::PrepareAsyncUnHoldRaw(::grpc::ClientContext* context, const ::fs::UnHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::UnHoldResponse, ::fs::UnHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnHold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::UnHoldResponse>* Api::Stub::AsyncUnHoldRaw(::grpc::ClientContext* context, const ::fs::UnHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnHoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::SetProfileVar(::grpc::ClientContext* context, const ::fs::SetProfileVarRequest& request, ::fs::SetProfileVarResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::SetProfileVarRequest, ::fs::SetProfileVarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfileVar_, context, request, response);
}

void Api::Stub::async::SetProfileVar(::grpc::ClientContext* context, const ::fs::SetProfileVarRequest* request, ::fs::SetProfileVarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::SetProfileVarRequest, ::fs::SetProfileVarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileVar_, context, request, response, std::move(f));
}

void Api::Stub::async::SetProfileVar(::grpc::ClientContext* context, const ::fs::SetProfileVarRequest* request, ::fs::SetProfileVarResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileVar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::SetProfileVarResponse>* Api::Stub::PrepareAsyncSetProfileVarRaw(::grpc::ClientContext* context, const ::fs::SetProfileVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::SetProfileVarResponse, ::fs::SetProfileVarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfileVar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::SetProfileVarResponse>* Api::Stub::AsyncSetProfileVarRaw(::grpc::ClientContext* context, const ::fs::SetProfileVarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileVarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::ConfirmPush(::grpc::ClientContext* context, const ::fs::ConfirmPushRequest& request, ::fs::ConfirmPushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::ConfirmPushRequest, ::fs::ConfirmPushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmPush_, context, request, response);
}

void Api::Stub::async::ConfirmPush(::grpc::ClientContext* context, const ::fs::ConfirmPushRequest* request, ::fs::ConfirmPushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::ConfirmPushRequest, ::fs::ConfirmPushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmPush_, context, request, response, std::move(f));
}

void Api::Stub::async::ConfirmPush(::grpc::ClientContext* context, const ::fs::ConfirmPushRequest* request, ::fs::ConfirmPushResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmPush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::ConfirmPushResponse>* Api::Stub::PrepareAsyncConfirmPushRaw(::grpc::ClientContext* context, const ::fs::ConfirmPushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::ConfirmPushResponse, ::fs::ConfirmPushRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmPush_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::ConfirmPushResponse>* Api::Stub::AsyncConfirmPushRaw(::grpc::ClientContext* context, const ::fs::ConfirmPushRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmPushRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::Broadcast(::grpc::ClientContext* context, const ::fs::BroadcastRequest& request, ::fs::BroadcastResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::BroadcastRequest, ::fs::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

void Api::Stub::async::Broadcast(::grpc::ClientContext* context, const ::fs::BroadcastRequest* request, ::fs::BroadcastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::BroadcastRequest, ::fs::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void Api::Stub::async::Broadcast(::grpc::ClientContext* context, const ::fs::BroadcastRequest* request, ::fs::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::BroadcastResponse>* Api::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::fs::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::BroadcastResponse, ::fs::BroadcastRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Broadcast_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::BroadcastResponse>* Api::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const ::fs::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::SetEavesdropState(::grpc::ClientContext* context, const ::fs::SetEavesdropStateRequest& request, ::fs::SetEavesdropStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::SetEavesdropStateRequest, ::fs::SetEavesdropStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEavesdropState_, context, request, response);
}

void Api::Stub::async::SetEavesdropState(::grpc::ClientContext* context, const ::fs::SetEavesdropStateRequest* request, ::fs::SetEavesdropStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::SetEavesdropStateRequest, ::fs::SetEavesdropStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEavesdropState_, context, request, response, std::move(f));
}

void Api::Stub::async::SetEavesdropState(::grpc::ClientContext* context, const ::fs::SetEavesdropStateRequest* request, ::fs::SetEavesdropStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEavesdropState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::SetEavesdropStateResponse>* Api::Stub::PrepareAsyncSetEavesdropStateRaw(::grpc::ClientContext* context, const ::fs::SetEavesdropStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::SetEavesdropStateResponse, ::fs::SetEavesdropStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEavesdropState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::SetEavesdropStateResponse>* Api::Stub::AsyncSetEavesdropStateRaw(::grpc::ClientContext* context, const ::fs::SetEavesdropStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEavesdropStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Api::Stub::BlindTransfer(::grpc::ClientContext* context, const ::fs::BlindTransferRequest& request, ::fs::BlindTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::BlindTransferRequest, ::fs::BlindTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BlindTransfer_, context, request, response);
}

void Api::Stub::async::BlindTransfer(::grpc::ClientContext* context, const ::fs::BlindTransferRequest* request, ::fs::BlindTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::BlindTransferRequest, ::fs::BlindTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlindTransfer_, context, request, response, std::move(f));
}

void Api::Stub::async::BlindTransfer(::grpc::ClientContext* context, const ::fs::BlindTransferRequest* request, ::fs::BlindTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlindTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::BlindTransferResponse>* Api::Stub::PrepareAsyncBlindTransferRaw(::grpc::ClientContext* context, const ::fs::BlindTransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::BlindTransferResponse, ::fs::BlindTransferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BlindTransfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::BlindTransferResponse>* Api::Stub::AsyncBlindTransferRaw(::grpc::ClientContext* context, const ::fs::BlindTransferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBlindTransferRaw(context, request, cq);
  result->StartCall();
  return result;
}

Api::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::OriginateRequest, ::fs::OriginateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::OriginateRequest* req,
             ::fs::OriginateResponse* resp) {
               return service->Originate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::ExecuteRequest, ::fs::ExecuteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::ExecuteRequest* req,
             ::fs::ExecuteResponse* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::SetVariablesRequest, ::fs::SetVariablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::SetVariablesRequest* req,
             ::fs::SetVariablesResponse* resp) {
               return service->SetVariables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::BridgeRequest, ::fs::BridgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::BridgeRequest* req,
             ::fs::BridgeResponse* resp) {
               return service->Bridge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::BridgeCallRequest, ::fs::BridgeCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::BridgeCallRequest* req,
             ::fs::BridgeCallResponse* resp) {
               return service->BridgeCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::StopPlaybackRequest, ::fs::StopPlaybackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::StopPlaybackRequest* req,
             ::fs::StopPlaybackResponse* resp) {
               return service->StopPlayback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::HangupRequest, ::fs::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::HangupRequest* req,
             ::fs::HangupResponse* resp) {
               return service->Hangup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::HangupMatchingVarsReqeust, ::fs::HangupMatchingVarsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::HangupMatchingVarsReqeust* req,
             ::fs::HangupMatchingVarsResponse* resp) {
               return service->HangupMatchingVars(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::QueueRequest, ::fs::QueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::QueueRequest* req,
             ::fs::QueueResponse* resp) {
               return service->Queue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::HangupManyRequest, ::fs::HangupManyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::HangupManyRequest* req,
             ::fs::HangupManyResponse* resp) {
               return service->HangupMany(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::HoldRequest, ::fs::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::HoldRequest* req,
             ::fs::HoldResponse* resp) {
               return service->Hold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::UnHoldRequest, ::fs::UnHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::UnHoldRequest* req,
             ::fs::UnHoldResponse* resp) {
               return service->UnHold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::SetProfileVarRequest, ::fs::SetProfileVarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::SetProfileVarRequest* req,
             ::fs::SetProfileVarResponse* resp) {
               return service->SetProfileVar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::ConfirmPushRequest, ::fs::ConfirmPushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::ConfirmPushRequest* req,
             ::fs::ConfirmPushResponse* resp) {
               return service->ConfirmPush(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::BroadcastRequest, ::fs::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::BroadcastRequest* req,
             ::fs::BroadcastResponse* resp) {
               return service->Broadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::SetEavesdropStateRequest, ::fs::SetEavesdropStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::SetEavesdropStateRequest* req,
             ::fs::SetEavesdropStateResponse* resp) {
               return service->SetEavesdropState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::fs::BlindTransferRequest, ::fs::BlindTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Api::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::BlindTransferRequest* req,
             ::fs::BlindTransferResponse* resp) {
               return service->BlindTransfer(ctx, req, resp);
             }, this)));
}

Api::Service::~Service() {
}

::grpc::Status Api::Service::Originate(::grpc::ServerContext* context, const ::fs::OriginateRequest* request, ::fs::OriginateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Execute(::grpc::ServerContext* context, const ::fs::ExecuteRequest* request, ::fs::ExecuteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::SetVariables(::grpc::ServerContext* context, const ::fs::SetVariablesRequest* request, ::fs::SetVariablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Bridge(::grpc::ServerContext* context, const ::fs::BridgeRequest* request, ::fs::BridgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::BridgeCall(::grpc::ServerContext* context, const ::fs::BridgeCallRequest* request, ::fs::BridgeCallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::StopPlayback(::grpc::ServerContext* context, const ::fs::StopPlaybackRequest* request, ::fs::StopPlaybackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Hangup(::grpc::ServerContext* context, const ::fs::HangupRequest* request, ::fs::HangupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::HangupMatchingVars(::grpc::ServerContext* context, const ::fs::HangupMatchingVarsReqeust* request, ::fs::HangupMatchingVarsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Queue(::grpc::ServerContext* context, const ::fs::QueueRequest* request, ::fs::QueueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::HangupMany(::grpc::ServerContext* context, const ::fs::HangupManyRequest* request, ::fs::HangupManyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Hold(::grpc::ServerContext* context, const ::fs::HoldRequest* request, ::fs::HoldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::UnHold(::grpc::ServerContext* context, const ::fs::UnHoldRequest* request, ::fs::UnHoldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::SetProfileVar(::grpc::ServerContext* context, const ::fs::SetProfileVarRequest* request, ::fs::SetProfileVarResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::ConfirmPush(::grpc::ServerContext* context, const ::fs::ConfirmPushRequest* request, ::fs::ConfirmPushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::Broadcast(::grpc::ServerContext* context, const ::fs::BroadcastRequest* request, ::fs::BroadcastResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::SetEavesdropState(::grpc::ServerContext* context, const ::fs::SetEavesdropStateRequest* request, ::fs::SetEavesdropStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::BlindTransfer(::grpc::ServerContext* context, const ::fs::BlindTransferRequest* request, ::fs::BlindTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fs

