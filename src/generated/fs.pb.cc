// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#include "fs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace fs {
PROTOBUF_CONSTEXPR BlindTransferRequest_VariablesEntry_DoNotUse::BlindTransferRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BlindTransferRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal _BlindTransferRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BlindTransferRequest::BlindTransferRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dialplan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlindTransferRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlindTransferRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlindTransferRequestDefaultTypeInternal() {}
  union {
    BlindTransferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlindTransferRequestDefaultTypeInternal _BlindTransferRequest_default_instance_;
PROTOBUF_CONSTEXPR BlindTransferResponse::BlindTransferResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlindTransferResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlindTransferResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlindTransferResponseDefaultTypeInternal() {}
  union {
    BlindTransferResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlindTransferResponseDefaultTypeInternal _BlindTransferResponse_default_instance_;
PROTOBUF_CONSTEXPR SetEavesdropStateRequest::SetEavesdropStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetEavesdropStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEavesdropStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEavesdropStateRequestDefaultTypeInternal() {}
  union {
    SetEavesdropStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEavesdropStateRequestDefaultTypeInternal _SetEavesdropStateRequest_default_instance_;
PROTOBUF_CONSTEXPR SetEavesdropStateResponse::SetEavesdropStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetEavesdropStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEavesdropStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEavesdropStateResponseDefaultTypeInternal() {}
  union {
    SetEavesdropStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEavesdropStateResponseDefaultTypeInternal _SetEavesdropStateResponse_default_instance_;
PROTOBUF_CONSTEXPR BroadcastRequest::BroadcastRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wait_for_answer_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastRequestDefaultTypeInternal() {}
  union {
    BroadcastRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
PROTOBUF_CONSTEXPR BroadcastResponse::BroadcastResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastResponseDefaultTypeInternal() {}
  union {
    BroadcastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
PROTOBUF_CONSTEXPR ConfirmPushRequest::ConfirmPushRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmPushRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmPushRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmPushRequestDefaultTypeInternal() {}
  union {
    ConfirmPushRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmPushRequestDefaultTypeInternal _ConfirmPushRequest_default_instance_;
PROTOBUF_CONSTEXPR ConfirmPushResponse::ConfirmPushResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmPushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmPushResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmPushResponseDefaultTypeInternal() {}
  union {
    ConfirmPushResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmPushResponseDefaultTypeInternal _ConfirmPushResponse_default_instance_;
PROTOBUF_CONSTEXPR SetProfileVarRequest_VariablesEntry_DoNotUse::SetProfileVarRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetProfileVarRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal _SetProfileVarRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SetProfileVarRequest::SetProfileVarRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetProfileVarRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProfileVarRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProfileVarRequestDefaultTypeInternal() {}
  union {
    SetProfileVarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProfileVarRequestDefaultTypeInternal _SetProfileVarRequest_default_instance_;
PROTOBUF_CONSTEXPR SetProfileVarResponse::SetProfileVarResponse(
    ::_pbi::ConstantInitialized) {}
struct SetProfileVarResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProfileVarResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProfileVarResponseDefaultTypeInternal() {}
  union {
    SetProfileVarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProfileVarResponseDefaultTypeInternal _SetProfileVarResponse_default_instance_;
PROTOBUF_CONSTEXPR StopPlaybackRequest::StopPlaybackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopPlaybackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPlaybackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPlaybackRequestDefaultTypeInternal() {}
  union {
    StopPlaybackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPlaybackRequestDefaultTypeInternal _StopPlaybackRequest_default_instance_;
PROTOBUF_CONSTEXPR StopPlaybackResponse::StopPlaybackResponse(
    ::_pbi::ConstantInitialized) {}
struct StopPlaybackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPlaybackResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPlaybackResponseDefaultTypeInternal() {}
  union {
    StopPlaybackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPlaybackResponseDefaultTypeInternal _StopPlaybackResponse_default_instance_;
PROTOBUF_CONSTEXPR BridgeCallRequest_VariablesEntry_DoNotUse::BridgeCallRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BridgeCallRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal _BridgeCallRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BridgeCallRequest::BridgeCallRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.leg_a_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leg_b_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BridgeCallRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeCallRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeCallRequestDefaultTypeInternal() {}
  union {
    BridgeCallRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeCallRequestDefaultTypeInternal _BridgeCallRequest_default_instance_;
PROTOBUF_CONSTEXPR BridgeCallResponse::BridgeCallResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BridgeCallResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeCallResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeCallResponseDefaultTypeInternal() {}
  union {
    BridgeCallResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeCallResponseDefaultTypeInternal _BridgeCallResponse_default_instance_;
PROTOBUF_CONSTEXPR HoldRequest::HoldRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HoldRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HoldRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HoldRequestDefaultTypeInternal() {}
  union {
    HoldRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HoldRequestDefaultTypeInternal _HoldRequest_default_instance_;
PROTOBUF_CONSTEXPR HoldResponse::HoldResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HoldResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HoldResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HoldResponseDefaultTypeInternal() {}
  union {
    HoldResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HoldResponseDefaultTypeInternal _HoldResponse_default_instance_;
PROTOBUF_CONSTEXPR UnHoldRequest::UnHoldRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnHoldRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnHoldRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnHoldRequestDefaultTypeInternal() {}
  union {
    UnHoldRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnHoldRequestDefaultTypeInternal _UnHoldRequest_default_instance_;
PROTOBUF_CONSTEXPR UnHoldResponse::UnHoldResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnHoldResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnHoldResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnHoldResponseDefaultTypeInternal() {}
  union {
    UnHoldResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnHoldResponseDefaultTypeInternal _UnHoldResponse_default_instance_;
PROTOBUF_CONSTEXPR HangupManyRequest::HangupManyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_.cause_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupManyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupManyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupManyRequestDefaultTypeInternal() {}
  union {
    HangupManyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupManyRequestDefaultTypeInternal _HangupManyRequest_default_instance_;
PROTOBUF_CONSTEXPR HangupManyResponse::HangupManyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupManyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupManyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupManyResponseDefaultTypeInternal() {}
  union {
    HangupManyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupManyResponseDefaultTypeInternal _HangupManyResponse_default_instance_;
PROTOBUF_CONSTEXPR QueueRequest_VariablesEntry_DoNotUse::QueueRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueueRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal _QueueRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR QueueRequest::QueueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playback_args_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueueRequestDefaultTypeInternal() {}
  union {
    QueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueueRequestDefaultTypeInternal _QueueRequest_default_instance_;
PROTOBUF_CONSTEXPR QueueResponse::QueueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueueResponseDefaultTypeInternal() {}
  union {
    QueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueueResponseDefaultTypeInternal _QueueResponse_default_instance_;
PROTOBUF_CONSTEXPR ErrorExecute::ErrorExecute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorExecuteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorExecuteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorExecuteDefaultTypeInternal() {}
  union {
    ErrorExecute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorExecuteDefaultTypeInternal _ErrorExecute_default_instance_;
PROTOBUF_CONSTEXPR ExecuteRequest::ExecuteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteRequestDefaultTypeInternal() {}
  union {
    ExecuteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteResponse::ExecuteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteResponseDefaultTypeInternal() {}
  union {
    ExecuteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteResponseDefaultTypeInternal _ExecuteResponse_default_instance_;
PROTOBUF_CONSTEXPR HangupRequest_VariablesEntry_DoNotUse::HangupRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HangupRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal _HangupRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HangupRequest::HangupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cause_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reporting_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupRequestDefaultTypeInternal() {}
  union {
    HangupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupRequestDefaultTypeInternal _HangupRequest_default_instance_;
PROTOBUF_CONSTEXPR HangupResponse::HangupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupResponseDefaultTypeInternal() {}
  union {
    HangupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupResponseDefaultTypeInternal _HangupResponse_default_instance_;
PROTOBUF_CONSTEXPR OriginateRequest_Extension::OriginateRequest_Extension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OriginateRequest_ExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginateRequest_ExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginateRequest_ExtensionDefaultTypeInternal() {}
  union {
    OriginateRequest_Extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginateRequest_ExtensionDefaultTypeInternal _OriginateRequest_Extension_default_instance_;
PROTOBUF_CONSTEXPR OriginateRequest_VariablesEntry_DoNotUse::OriginateRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OriginateRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal _OriginateRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OriginateRequest::OriginateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.extensions_)*/{}
  , /*decltype(_impl_.destination_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callernumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dialplan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.check_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OriginateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginateRequestDefaultTypeInternal() {}
  union {
    OriginateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginateRequestDefaultTypeInternal _OriginateRequest_default_instance_;
PROTOBUF_CONSTEXPR OriginateResponse::OriginateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OriginateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginateResponseDefaultTypeInternal() {}
  union {
    OriginateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginateResponseDefaultTypeInternal _OriginateResponse_default_instance_;
PROTOBUF_CONSTEXPR BridgeRequest::BridgeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leg_a_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leg_b_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leg_b_reserve_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BridgeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeRequestDefaultTypeInternal() {}
  union {
    BridgeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeRequestDefaultTypeInternal _BridgeRequest_default_instance_;
PROTOBUF_CONSTEXPR BridgeResponse::BridgeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BridgeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeResponseDefaultTypeInternal() {}
  union {
    BridgeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeResponseDefaultTypeInternal _BridgeResponse_default_instance_;
PROTOBUF_CONSTEXPR SetVariablesRequest_VariablesEntry_DoNotUse::SetVariablesRequest_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetVariablesRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal _SetVariablesRequest_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SetVariablesRequest::SetVariablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVariablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVariablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVariablesRequestDefaultTypeInternal() {}
  union {
    SetVariablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVariablesRequestDefaultTypeInternal _SetVariablesRequest_default_instance_;
PROTOBUF_CONSTEXPR SetVariablesResponse::SetVariablesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVariablesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVariablesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVariablesResponseDefaultTypeInternal() {}
  union {
    SetVariablesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVariablesResponseDefaultTypeInternal _SetVariablesResponse_default_instance_;
PROTOBUF_CONSTEXPR HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HangupMatchingVarsReqeust_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal _HangupMatchingVarsReqeust_VariablesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HangupMatchingVarsReqeust::HangupMatchingVarsReqeust(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.cause_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupMatchingVarsReqeustDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupMatchingVarsReqeustDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupMatchingVarsReqeustDefaultTypeInternal() {}
  union {
    HangupMatchingVarsReqeust _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupMatchingVarsReqeustDefaultTypeInternal _HangupMatchingVarsReqeust_default_instance_;
PROTOBUF_CONSTEXPR HangupMatchingVarsResponse::HangupMatchingVarsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HangupMatchingVarsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HangupMatchingVarsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HangupMatchingVarsResponseDefaultTypeInternal() {}
  union {
    HangupMatchingVarsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HangupMatchingVarsResponseDefaultTypeInternal _HangupMatchingVarsResponse_default_instance_;
}  // namespace fs
static ::_pb::Metadata file_level_metadata_fs_2eproto[44];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fs_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fs_2eproto = nullptr;

const uint32_t TableStruct_fs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _impl_.destination_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _impl_.dialplan_),
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferRequest, _impl_.context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BlindTransferResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetEavesdropStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetEavesdropStateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::SetEavesdropStateRequest, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetEavesdropStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetEavesdropStateResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastRequest, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastRequest, _impl_.wait_for_answer_),
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastRequest, _impl_.leg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::fs::BroadcastResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::ConfirmPushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::ConfirmPushRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::ConfirmPushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::ConfirmPushResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarRequest, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetProfileVarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::StopPlaybackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::StopPlaybackRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::StopPlaybackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest, _impl_.leg_a_id_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest, _impl_.leg_b_id_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallRequest, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallResponse, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeCallResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HoldRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HoldResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HoldResponse, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::UnHoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::UnHoldRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::UnHoldResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::UnHoldResponse, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupManyRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupManyRequest, _impl_.cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupManyResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest, _impl_.playback_file_),
  PROTOBUF_FIELD_OFFSET(::fs::QueueRequest, _impl_.playback_args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::QueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::QueueResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::ErrorExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::ErrorExecute, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::fs::ErrorExecute, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteRequest, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteRequest, _impl_.args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::fs::ExecuteResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest, _impl_.cause_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest, _impl_.reporting_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupRequest, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_Extension, _impl_.appname_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_Extension, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.destination_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.callernumber_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.callername_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.dialplan_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.extensions_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateRequest, _impl_.check_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::OriginateResponse, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::fs::OriginateResponse, _impl_.error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeRequest, _impl_.leg_a_id_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeRequest, _impl_.leg_b_id_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeRequest, _impl_.leg_b_reserve_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::BridgeResponse, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::fs::BridgeResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesRequest, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::SetVariablesResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust, _impl_.cause_),
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsReqeust, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fs::HangupMatchingVarsResponse, _impl_.count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::fs::BlindTransferRequest_VariablesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::fs::BlindTransferRequest)},
  { 21, -1, -1, sizeof(::fs::BlindTransferResponse)},
  { 28, -1, -1, sizeof(::fs::SetEavesdropStateRequest)},
  { 36, -1, -1, sizeof(::fs::SetEavesdropStateResponse)},
  { 43, -1, -1, sizeof(::fs::BroadcastRequest)},
  { 53, -1, -1, sizeof(::fs::BroadcastResponse)},
  { 61, -1, -1, sizeof(::fs::ConfirmPushRequest)},
  { 68, -1, -1, sizeof(::fs::ConfirmPushResponse)},
  { 75, 83, -1, sizeof(::fs::SetProfileVarRequest_VariablesEntry_DoNotUse)},
  { 85, -1, -1, sizeof(::fs::SetProfileVarRequest)},
  { 93, -1, -1, sizeof(::fs::SetProfileVarResponse)},
  { 99, -1, -1, sizeof(::fs::StopPlaybackRequest)},
  { 106, -1, -1, sizeof(::fs::StopPlaybackResponse)},
  { 112, 120, -1, sizeof(::fs::BridgeCallRequest_VariablesEntry_DoNotUse)},
  { 122, -1, -1, sizeof(::fs::BridgeCallRequest)},
  { 131, -1, -1, sizeof(::fs::BridgeCallResponse)},
  { 139, -1, -1, sizeof(::fs::HoldRequest)},
  { 146, -1, -1, sizeof(::fs::HoldResponse)},
  { 153, -1, -1, sizeof(::fs::UnHoldRequest)},
  { 160, -1, -1, sizeof(::fs::UnHoldResponse)},
  { 167, -1, -1, sizeof(::fs::HangupManyRequest)},
  { 175, -1, -1, sizeof(::fs::HangupManyResponse)},
  { 182, 190, -1, sizeof(::fs::QueueRequest_VariablesEntry_DoNotUse)},
  { 192, -1, -1, sizeof(::fs::QueueRequest)},
  { 202, -1, -1, sizeof(::fs::QueueResponse)},
  { 209, -1, -1, sizeof(::fs::ErrorExecute)},
  { 217, -1, -1, sizeof(::fs::ExecuteRequest)},
  { 225, -1, -1, sizeof(::fs::ExecuteResponse)},
  { 233, 241, -1, sizeof(::fs::HangupRequest_VariablesEntry_DoNotUse)},
  { 243, -1, -1, sizeof(::fs::HangupRequest)},
  { 253, -1, -1, sizeof(::fs::HangupResponse)},
  { 260, -1, -1, sizeof(::fs::OriginateRequest_Extension)},
  { 268, 276, -1, sizeof(::fs::OriginateRequest_VariablesEntry_DoNotUse)},
  { 278, -1, -1, sizeof(::fs::OriginateRequest)},
  { 295, -1, -1, sizeof(::fs::OriginateResponse)},
  { 304, -1, -1, sizeof(::fs::BridgeRequest)},
  { 313, -1, -1, sizeof(::fs::BridgeResponse)},
  { 321, 329, -1, sizeof(::fs::SetVariablesRequest_VariablesEntry_DoNotUse)},
  { 331, -1, -1, sizeof(::fs::SetVariablesRequest)},
  { 339, -1, -1, sizeof(::fs::SetVariablesResponse)},
  { 346, 354, -1, sizeof(::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse)},
  { 356, -1, -1, sizeof(::fs::HangupMatchingVarsReqeust)},
  { 364, -1, -1, sizeof(::fs::HangupMatchingVarsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::fs::_BlindTransferRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_BlindTransferRequest_default_instance_._instance,
  &::fs::_BlindTransferResponse_default_instance_._instance,
  &::fs::_SetEavesdropStateRequest_default_instance_._instance,
  &::fs::_SetEavesdropStateResponse_default_instance_._instance,
  &::fs::_BroadcastRequest_default_instance_._instance,
  &::fs::_BroadcastResponse_default_instance_._instance,
  &::fs::_ConfirmPushRequest_default_instance_._instance,
  &::fs::_ConfirmPushResponse_default_instance_._instance,
  &::fs::_SetProfileVarRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_SetProfileVarRequest_default_instance_._instance,
  &::fs::_SetProfileVarResponse_default_instance_._instance,
  &::fs::_StopPlaybackRequest_default_instance_._instance,
  &::fs::_StopPlaybackResponse_default_instance_._instance,
  &::fs::_BridgeCallRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_BridgeCallRequest_default_instance_._instance,
  &::fs::_BridgeCallResponse_default_instance_._instance,
  &::fs::_HoldRequest_default_instance_._instance,
  &::fs::_HoldResponse_default_instance_._instance,
  &::fs::_UnHoldRequest_default_instance_._instance,
  &::fs::_UnHoldResponse_default_instance_._instance,
  &::fs::_HangupManyRequest_default_instance_._instance,
  &::fs::_HangupManyResponse_default_instance_._instance,
  &::fs::_QueueRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_QueueRequest_default_instance_._instance,
  &::fs::_QueueResponse_default_instance_._instance,
  &::fs::_ErrorExecute_default_instance_._instance,
  &::fs::_ExecuteRequest_default_instance_._instance,
  &::fs::_ExecuteResponse_default_instance_._instance,
  &::fs::_HangupRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_HangupRequest_default_instance_._instance,
  &::fs::_HangupResponse_default_instance_._instance,
  &::fs::_OriginateRequest_Extension_default_instance_._instance,
  &::fs::_OriginateRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_OriginateRequest_default_instance_._instance,
  &::fs::_OriginateResponse_default_instance_._instance,
  &::fs::_BridgeRequest_default_instance_._instance,
  &::fs::_BridgeResponse_default_instance_._instance,
  &::fs::_SetVariablesRequest_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_SetVariablesRequest_default_instance_._instance,
  &::fs::_SetVariablesResponse_default_instance_._instance,
  &::fs::_HangupMatchingVarsReqeust_VariablesEntry_DoNotUse_default_instance_._instance,
  &::fs::_HangupMatchingVarsReqeust_default_instance_._instance,
  &::fs::_HangupMatchingVarsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_fs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010fs.proto\022\002fs\"\310\001\n\024BlindTransferRequest\022"
  "\n\n\002id\030\001 \001(\t\022\023\n\013destination\030\002 \001(\t\022:\n\tvari"
  "ables\030\003 \003(\0132\'.fs.BlindTransferRequest.Va"
  "riablesEntry\022\020\n\010dialplan\030\004 \001(\t\022\017\n\007contex"
  "t\030\005 \001(\t\0320\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"8\n\025BlindTransferRespon"
  "se\022\037\n\005error\030\001 \001(\0132\020.fs.ErrorExecute\"5\n\030S"
  "etEavesdropStateRequest\022\n\n\002id\030\001 \001(\t\022\r\n\005s"
  "tate\030\002 \001(\t\"<\n\031SetEavesdropStateResponse\022"
  "\037\n\005error\030\001 \001(\0132\020.fs.ErrorExecute\"R\n\020Broa"
  "dcastRequest\022\n\n\002id\030\001 \001(\t\022\014\n\004args\030\002 \001(\t\022\027"
  "\n\017wait_for_answer\030\003 \001(\010\022\013\n\003leg\030\004 \001(\t\"B\n\021"
  "BroadcastResponse\022\014\n\004data\030\001 \001(\t\022\037\n\005error"
  "\030\002 \001(\0132\020.fs.ErrorExecute\" \n\022ConfirmPushR"
  "equest\022\n\n\002id\030\001 \001(\t\"6\n\023ConfirmPushRespons"
  "e\022\037\n\005error\030\001 \001(\0132\020.fs.ErrorExecute\"\220\001\n\024S"
  "etProfileVarRequest\022\n\n\002id\030\001 \001(\t\022:\n\tvaria"
  "bles\030\002 \003(\0132\'.fs.SetProfileVarRequest.Var"
  "iablesEntry\0320\n\016VariablesEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\027\n\025SetProfileVarRe"
  "sponse\"!\n\023StopPlaybackRequest\022\n\n\002id\030\001 \001("
  "\t\"\026\n\024StopPlaybackResponse\"\242\001\n\021BridgeCall"
  "Request\022\020\n\010leg_a_id\030\001 \001(\t\022\020\n\010leg_b_id\030\002 "
  "\001(\t\0227\n\tvariables\030\003 \003(\0132$.fs.BridgeCallRe"
  "quest.VariablesEntry\0320\n\016VariablesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"C\n\022Bridge"
  "CallResponse\022\014\n\004uuid\030\001 \001(\t\022\037\n\005error\030\002 \001("
  "\0132\020.fs.ErrorExecute\"\031\n\013HoldRequest\022\n\n\002id"
  "\030\001 \003(\t\"\032\n\014HoldResponse\022\n\n\002id\030\001 \003(\t\"\033\n\rUn"
  "HoldRequest\022\n\n\002id\030\001 \003(\t\"\034\n\016UnHoldRespons"
  "e\022\n\n\002id\030\001 \003(\t\".\n\021HangupManyRequest\022\n\n\002id"
  "\030\001 \003(\t\022\r\n\005cause\030\002 \001(\t\" \n\022HangupManyRespo"
  "nse\022\n\n\002id\030\001 \003(\t\"\256\001\n\014QueueRequest\022\n\n\002id\030\001"
  " \001(\t\0222\n\tvariables\030\002 \003(\0132\037.fs.QueueReques"
  "t.VariablesEntry\022\025\n\rplayback_file\030\003 \001(\t\022"
  "\025\n\rplayback_args\030\004 \001(\005\0320\n\016VariablesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"0\n\rQueu"
  "eResponse\022\037\n\005error\030\001 \001(\0132\020.fs.ErrorExecu"
  "te\"b\n\014ErrorExecute\022\017\n\007message\030\001 \001(\t\022#\n\004t"
  "ype\030\002 \001(\0162\025.fs.ErrorExecute.Type\"\034\n\004Type"
  "\022\t\n\005ERROR\020\000\022\t\n\005USAGE\020\001\"/\n\016ExecuteRequest"
  "\022\017\n\007command\030\001 \001(\t\022\014\n\004args\030\002 \001(\t\"@\n\017Execu"
  "teResponse\022\014\n\004data\030\001 \001(\t\022\037\n\005error\030\002 \001(\0132"
  "\020.fs.ErrorExecute\"\246\001\n\rHangupRequest\022\014\n\004u"
  "uid\030\001 \001(\t\022\r\n\005cause\030\002 \001(\t\022\021\n\treporting\030\003 "
  "\001(\010\0223\n\tvariables\030\004 \003(\0132 .fs.HangupReques"
  "t.VariablesEntry\0320\n\016VariablesEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"1\n\016HangupResp"
  "onse\022\037\n\005error\030\001 \001(\0132\020.fs.ErrorExecute\"\315\003"
  "\n\020OriginateRequest\0226\n\tvariables\030\001 \003(\0132#."
  "fs.OriginateRequest.VariablesEntry\022\021\n\ten"
  "dpoints\030\002 \003(\t\022/\n\010strategy\030\003 \001(\0162\035.fs.Ori"
  "ginateRequest.Strategy\022\023\n\013destination\030\004 "
  "\001(\t\022\017\n\007timeout\030\005 \001(\005\022\024\n\014callerNumber\030\006 \001"
  "(\t\022\022\n\ncallerName\030\007 \001(\t\022\017\n\007context\030\010 \001(\t\022"
  "\020\n\010dialplan\030\t \001(\t\0222\n\nextensions\030\n \003(\0132\036."
  "fs.OriginateRequest.Extension\022\020\n\010check_i"
  "d\030\013 \001(\t\032*\n\tExtension\022\017\n\007appName\030\001 \001(\t\022\014\n"
  "\004args\030\002 \001(\t\0320\n\016VariablesEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"&\n\010Strategy\022\014\n\010FAI"
  "LOVER\020\000\022\014\n\010MULTIPLE\020\001\"V\n\021OriginateRespon"
  "se\022\014\n\004uuid\030\001 \001(\t\022\037\n\005error\030\002 \001(\0132\020.fs.Err"
  "orExecute\022\022\n\nerror_code\030\003 \001(\005\"M\n\rBridgeR"
  "equest\022\020\n\010leg_a_id\030\001 \001(\t\022\020\n\010leg_b_id\030\002 \001"
  "(\t\022\030\n\020leg_b_reserve_id\030\003 \001(\t\"\?\n\016BridgeRe"
  "sponse\022\014\n\004uuid\030\001 \001(\t\022\037\n\005error\030\002 \001(\0132\020.fs"
  ".ErrorExecute\"\220\001\n\023SetVariablesRequest\022\014\n"
  "\004uuid\030\001 \001(\t\0229\n\tvariables\030\002 \003(\0132&.fs.SetV"
  "ariablesRequest.VariablesEntry\0320\n\016Variab"
  "lesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"7\n\024SetVariablesResponse\022\037\n\005error\030\001 \001(\0132"
  "\020.fs.ErrorExecute\"\235\001\n\031HangupMatchingVars"
  "Reqeust\022\r\n\005cause\030\001 \001(\t\022\?\n\tvariables\030\002 \003("
  "\0132,.fs.HangupMatchingVarsReqeust.Variabl"
  "esEntry\0320\n\016VariablesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"+\n\032HangupMatchingVarsR"
  "esponse\022\r\n\005count\030\001 \001(\0052\256\010\n\003Api\022:\n\tOrigin"
  "ate\022\024.fs.OriginateRequest\032\025.fs.Originate"
  "Response\"\000\0224\n\007Execute\022\022.fs.ExecuteReques"
  "t\032\023.fs.ExecuteResponse\"\000\022C\n\014SetVariables"
  "\022\027.fs.SetVariablesRequest\032\030.fs.SetVariab"
  "lesResponse\"\000\0221\n\006Bridge\022\021.fs.BridgeReque"
  "st\032\022.fs.BridgeResponse\"\000\022=\n\nBridgeCall\022\025"
  ".fs.BridgeCallRequest\032\026.fs.BridgeCallRes"
  "ponse\"\000\022C\n\014StopPlayback\022\027.fs.StopPlaybac"
  "kRequest\032\030.fs.StopPlaybackResponse\"\000\0221\n\006"
  "Hangup\022\021.fs.HangupRequest\032\022.fs.HangupRes"
  "ponse\"\000\022U\n\022HangupMatchingVars\022\035.fs.Hangu"
  "pMatchingVarsReqeust\032\036.fs.HangupMatching"
  "VarsResponse\"\000\022.\n\005Queue\022\020.fs.QueueReques"
  "t\032\021.fs.QueueResponse\"\000\022=\n\nHangupMany\022\025.f"
  "s.HangupManyRequest\032\026.fs.HangupManyRespo"
  "nse\"\000\022+\n\004Hold\022\017.fs.HoldRequest\032\020.fs.Hold"
  "Response\"\000\0221\n\006UnHold\022\021.fs.UnHoldRequest\032"
  "\022.fs.UnHoldResponse\"\000\022F\n\rSetProfileVar\022\030"
  ".fs.SetProfileVarRequest\032\031.fs.SetProfile"
  "VarResponse\"\000\022@\n\013ConfirmPush\022\026.fs.Confir"
  "mPushRequest\032\027.fs.ConfirmPushResponse\"\000\022"
  ":\n\tBroadcast\022\024.fs.BroadcastRequest\032\025.fs."
  "BroadcastResponse\"\000\022R\n\021SetEavesdropState"
  "\022\034.fs.SetEavesdropStateRequest\032\035.fs.SetE"
  "avesdropStateResponse\"\000\022F\n\rBlindTransfer"
  "\022\030.fs.BlindTransferRequest\032\031.fs.BlindTra"
  "nsferResponse\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_fs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fs_2eproto = {
    false, false, 4143, descriptor_table_protodef_fs_2eproto,
    "fs.proto",
    &descriptor_table_fs_2eproto_once, nullptr, 0, 44,
    schemas, file_default_instances, TableStruct_fs_2eproto::offsets,
    file_level_metadata_fs_2eproto, file_level_enum_descriptors_fs_2eproto,
    file_level_service_descriptors_fs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fs_2eproto_getter() {
  return &descriptor_table_fs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fs_2eproto(&descriptor_table_fs_2eproto);
namespace fs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorExecute_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fs_2eproto);
  return file_level_enum_descriptors_fs_2eproto[0];
}
bool ErrorExecute_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ErrorExecute_Type ErrorExecute::ERROR;
constexpr ErrorExecute_Type ErrorExecute::USAGE;
constexpr ErrorExecute_Type ErrorExecute::Type_MIN;
constexpr ErrorExecute_Type ErrorExecute::Type_MAX;
constexpr int ErrorExecute::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OriginateRequest_Strategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fs_2eproto);
  return file_level_enum_descriptors_fs_2eproto[1];
}
bool OriginateRequest_Strategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OriginateRequest_Strategy OriginateRequest::FAILOVER;
constexpr OriginateRequest_Strategy OriginateRequest::MULTIPLE;
constexpr OriginateRequest_Strategy OriginateRequest::Strategy_MIN;
constexpr OriginateRequest_Strategy OriginateRequest::Strategy_MAX;
constexpr int OriginateRequest::Strategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

BlindTransferRequest_VariablesEntry_DoNotUse::BlindTransferRequest_VariablesEntry_DoNotUse() {}
BlindTransferRequest_VariablesEntry_DoNotUse::BlindTransferRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BlindTransferRequest_VariablesEntry_DoNotUse::MergeFrom(const BlindTransferRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BlindTransferRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[0]);
}

// ===================================================================

class BlindTransferRequest::_Internal {
 public:
};

BlindTransferRequest::BlindTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BlindTransferRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.BlindTransferRequest)
}
BlindTransferRequest::BlindTransferRequest(const BlindTransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlindTransferRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.destination_){}
    , decltype(_impl_.dialplan_){}
    , decltype(_impl_.context_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dialplan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialplan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dialplan().empty()) {
    _this->_impl_.dialplan_.Set(from._internal_dialplan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    _this->_impl_.context_.Set(from._internal_context(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.BlindTransferRequest)
}

inline void BlindTransferRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.destination_){}
    , decltype(_impl_.dialplan_){}
    , decltype(_impl_.context_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dialplan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialplan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlindTransferRequest::~BlindTransferRequest() {
  // @@protoc_insertion_point(destructor:fs.BlindTransferRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BlindTransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.id_.Destroy();
  _impl_.destination_.Destroy();
  _impl_.dialplan_.Destroy();
  _impl_.context_.Destroy();
}

void BlindTransferRequest::ArenaDtor(void* object) {
  BlindTransferRequest* _this = reinterpret_cast< BlindTransferRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void BlindTransferRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlindTransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BlindTransferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.destination_.ClearToEmpty();
  _impl_.dialplan_.ClearToEmpty();
  _impl_.context_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlindTransferRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BlindTransferRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BlindTransferRequest.destination"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string dialplan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dialplan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BlindTransferRequest.dialplan"));
        } else
          goto handle_unusual;
        continue;
      // string context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BlindTransferRequest.context"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlindTransferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BlindTransferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BlindTransferRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string destination = 2;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BlindTransferRequest.destination");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination(), target);
  }

  // map<string, string> variables = 3;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = BlindTransferRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.BlindTransferRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.BlindTransferRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string dialplan = 4;
  if (!this->_internal_dialplan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dialplan().data(), static_cast<int>(this->_internal_dialplan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BlindTransferRequest.dialplan");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dialplan(), target);
  }

  // string context = 5;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BlindTransferRequest.context");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BlindTransferRequest)
  return target;
}

size_t BlindTransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BlindTransferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += BlindTransferRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string destination = 2;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // string dialplan = 4;
  if (!this->_internal_dialplan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dialplan());
  }

  // string context = 5;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlindTransferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlindTransferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlindTransferRequest::GetClassData() const { return &_class_data_; }


void BlindTransferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlindTransferRequest*>(&to_msg);
  auto& from = static_cast<const BlindTransferRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BlindTransferRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_dialplan().empty()) {
    _this->_internal_set_dialplan(from._internal_dialplan());
  }
  if (!from._internal_context().empty()) {
    _this->_internal_set_context(from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlindTransferRequest::CopyFrom(const BlindTransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BlindTransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlindTransferRequest::IsInitialized() const {
  return true;
}

void BlindTransferRequest::InternalSwap(BlindTransferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_, lhs_arena,
      &other->_impl_.destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dialplan_, lhs_arena,
      &other->_impl_.dialplan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_, lhs_arena,
      &other->_impl_.context_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlindTransferRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[1]);
}

// ===================================================================

class BlindTransferResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const BlindTransferResponse* msg);
};

const ::fs::ErrorExecute&
BlindTransferResponse::_Internal::error(const BlindTransferResponse* msg) {
  return *msg->_impl_.error_;
}
BlindTransferResponse::BlindTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BlindTransferResponse)
}
BlindTransferResponse::BlindTransferResponse(const BlindTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlindTransferResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.BlindTransferResponse)
}

inline void BlindTransferResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlindTransferResponse::~BlindTransferResponse() {
  // @@protoc_insertion_point(destructor:fs.BlindTransferResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlindTransferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void BlindTransferResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlindTransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BlindTransferResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlindTransferResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlindTransferResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BlindTransferResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BlindTransferResponse)
  return target;
}

size_t BlindTransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BlindTransferResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlindTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlindTransferResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlindTransferResponse::GetClassData() const { return &_class_data_; }


void BlindTransferResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlindTransferResponse*>(&to_msg);
  auto& from = static_cast<const BlindTransferResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BlindTransferResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlindTransferResponse::CopyFrom(const BlindTransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BlindTransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlindTransferResponse::IsInitialized() const {
  return true;
}

void BlindTransferResponse::InternalSwap(BlindTransferResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlindTransferResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[2]);
}

// ===================================================================

class SetEavesdropStateRequest::_Internal {
 public:
};

SetEavesdropStateRequest::SetEavesdropStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.SetEavesdropStateRequest)
}
SetEavesdropStateRequest::SetEavesdropStateRequest(const SetEavesdropStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetEavesdropStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.SetEavesdropStateRequest)
}

inline void SetEavesdropStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetEavesdropStateRequest::~SetEavesdropStateRequest() {
  // @@protoc_insertion_point(destructor:fs.SetEavesdropStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEavesdropStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.state_.Destroy();
}

void SetEavesdropStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEavesdropStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.SetEavesdropStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEavesdropStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.SetEavesdropStateRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.SetEavesdropStateRequest.state"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEavesdropStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.SetEavesdropStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.SetEavesdropStateRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string state = 2;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.SetEavesdropStateRequest.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.SetEavesdropStateRequest)
  return target;
}

size_t SetEavesdropStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.SetEavesdropStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string state = 2;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEavesdropStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetEavesdropStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEavesdropStateRequest::GetClassData() const { return &_class_data_; }


void SetEavesdropStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetEavesdropStateRequest*>(&to_msg);
  auto& from = static_cast<const SetEavesdropStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.SetEavesdropStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEavesdropStateRequest::CopyFrom(const SetEavesdropStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.SetEavesdropStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEavesdropStateRequest::IsInitialized() const {
  return true;
}

void SetEavesdropStateRequest::InternalSwap(SetEavesdropStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEavesdropStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[3]);
}

// ===================================================================

class SetEavesdropStateResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const SetEavesdropStateResponse* msg);
};

const ::fs::ErrorExecute&
SetEavesdropStateResponse::_Internal::error(const SetEavesdropStateResponse* msg) {
  return *msg->_impl_.error_;
}
SetEavesdropStateResponse::SetEavesdropStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.SetEavesdropStateResponse)
}
SetEavesdropStateResponse::SetEavesdropStateResponse(const SetEavesdropStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetEavesdropStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.SetEavesdropStateResponse)
}

inline void SetEavesdropStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetEavesdropStateResponse::~SetEavesdropStateResponse() {
  // @@protoc_insertion_point(destructor:fs.SetEavesdropStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEavesdropStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void SetEavesdropStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEavesdropStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.SetEavesdropStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEavesdropStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEavesdropStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.SetEavesdropStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.SetEavesdropStateResponse)
  return target;
}

size_t SetEavesdropStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.SetEavesdropStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEavesdropStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetEavesdropStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEavesdropStateResponse::GetClassData() const { return &_class_data_; }


void SetEavesdropStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetEavesdropStateResponse*>(&to_msg);
  auto& from = static_cast<const SetEavesdropStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.SetEavesdropStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEavesdropStateResponse::CopyFrom(const SetEavesdropStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.SetEavesdropStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEavesdropStateResponse::IsInitialized() const {
  return true;
}

void SetEavesdropStateResponse::InternalSwap(SetEavesdropStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEavesdropStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[4]);
}

// ===================================================================

class BroadcastRequest::_Internal {
 public:
};

BroadcastRequest::BroadcastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.leg_){}
    , decltype(_impl_.wait_for_answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.leg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg().empty()) {
    _this->_impl_.leg_.Set(from._internal_leg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.wait_for_answer_ = from._impl_.wait_for_answer_;
  // @@protoc_insertion_point(copy_constructor:fs.BroadcastRequest)
}

inline void BroadcastRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.leg_){}
    , decltype(_impl_.wait_for_answer_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:fs.BroadcastRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.args_.Destroy();
  _impl_.leg_.Destroy();
}

void BroadcastRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.leg_.ClearToEmpty();
  _impl_.wait_for_answer_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BroadcastRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BroadcastRequest.args"));
        } else
          goto handle_unusual;
        continue;
      // bool wait_for_answer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wait_for_answer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_leg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BroadcastRequest.leg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BroadcastRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BroadcastRequest.args");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_args(), target);
  }

  // bool wait_for_answer = 3;
  if (this->_internal_wait_for_answer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_wait_for_answer(), target);
  }

  // string leg = 4;
  if (!this->_internal_leg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg().data(), static_cast<int>(this->_internal_leg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BroadcastRequest.leg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_leg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BroadcastRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // string leg = 4;
  if (!this->_internal_leg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg());
  }

  // bool wait_for_answer = 3;
  if (this->_internal_wait_for_answer() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastRequest::GetClassData() const { return &_class_data_; }


void BroadcastRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_leg().empty()) {
    _this->_internal_set_leg(from._internal_leg());
  }
  if (from._internal_wait_for_answer() != 0) {
    _this->_internal_set_wait_for_answer(from._internal_wait_for_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_, lhs_arena,
      &other->_impl_.leg_, rhs_arena
  );
  swap(_impl_.wait_for_answer_, other->_impl_.wait_for_answer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[5]);
}

// ===================================================================

class BroadcastResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const BroadcastResponse* msg);
};

const ::fs::ErrorExecute&
BroadcastResponse::_Internal::error(const BroadcastResponse* msg) {
  return *msg->_impl_.error_;
}
BroadcastResponse::BroadcastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.BroadcastResponse)
}

inline void BroadcastResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:fs.BroadcastResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void BroadcastResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BroadcastResponse.data"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BroadcastResponse.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BroadcastResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastResponse::GetClassData() const { return &_class_data_; }


void BroadcastResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastResponse*>(&to_msg);
  auto& from = static_cast<const BroadcastResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[6]);
}

// ===================================================================

class ConfirmPushRequest::_Internal {
 public:
};

ConfirmPushRequest::ConfirmPushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.ConfirmPushRequest)
}
ConfirmPushRequest::ConfirmPushRequest(const ConfirmPushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmPushRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.ConfirmPushRequest)
}

inline void ConfirmPushRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmPushRequest::~ConfirmPushRequest() {
  // @@protoc_insertion_point(destructor:fs.ConfirmPushRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmPushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ConfirmPushRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmPushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.ConfirmPushRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmPushRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.ConfirmPushRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmPushRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.ConfirmPushRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.ConfirmPushRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.ConfirmPushRequest)
  return target;
}

size_t ConfirmPushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.ConfirmPushRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmPushRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmPushRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmPushRequest::GetClassData() const { return &_class_data_; }


void ConfirmPushRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmPushRequest*>(&to_msg);
  auto& from = static_cast<const ConfirmPushRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.ConfirmPushRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmPushRequest::CopyFrom(const ConfirmPushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.ConfirmPushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmPushRequest::IsInitialized() const {
  return true;
}

void ConfirmPushRequest::InternalSwap(ConfirmPushRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmPushRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[7]);
}

// ===================================================================

class ConfirmPushResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const ConfirmPushResponse* msg);
};

const ::fs::ErrorExecute&
ConfirmPushResponse::_Internal::error(const ConfirmPushResponse* msg) {
  return *msg->_impl_.error_;
}
ConfirmPushResponse::ConfirmPushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.ConfirmPushResponse)
}
ConfirmPushResponse::ConfirmPushResponse(const ConfirmPushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmPushResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.ConfirmPushResponse)
}

inline void ConfirmPushResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConfirmPushResponse::~ConfirmPushResponse() {
  // @@protoc_insertion_point(destructor:fs.ConfirmPushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmPushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void ConfirmPushResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmPushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.ConfirmPushResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmPushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmPushResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.ConfirmPushResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.ConfirmPushResponse)
  return target;
}

size_t ConfirmPushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.ConfirmPushResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmPushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmPushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmPushResponse::GetClassData() const { return &_class_data_; }


void ConfirmPushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmPushResponse*>(&to_msg);
  auto& from = static_cast<const ConfirmPushResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.ConfirmPushResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmPushResponse::CopyFrom(const ConfirmPushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.ConfirmPushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmPushResponse::IsInitialized() const {
  return true;
}

void ConfirmPushResponse::InternalSwap(ConfirmPushResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmPushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[8]);
}

// ===================================================================

SetProfileVarRequest_VariablesEntry_DoNotUse::SetProfileVarRequest_VariablesEntry_DoNotUse() {}
SetProfileVarRequest_VariablesEntry_DoNotUse::SetProfileVarRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetProfileVarRequest_VariablesEntry_DoNotUse::MergeFrom(const SetProfileVarRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetProfileVarRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[9]);
}

// ===================================================================

class SetProfileVarRequest::_Internal {
 public:
};

SetProfileVarRequest::SetProfileVarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SetProfileVarRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.SetProfileVarRequest)
}
SetProfileVarRequest::SetProfileVarRequest(const SetProfileVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetProfileVarRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.SetProfileVarRequest)
}

inline void SetProfileVarRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetProfileVarRequest::~SetProfileVarRequest() {
  // @@protoc_insertion_point(destructor:fs.SetProfileVarRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SetProfileVarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.id_.Destroy();
}

void SetProfileVarRequest::ArenaDtor(void* object) {
  SetProfileVarRequest* _this = reinterpret_cast< SetProfileVarRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void SetProfileVarRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetProfileVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.SetProfileVarRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProfileVarRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.SetProfileVarRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProfileVarRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.SetProfileVarRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.SetProfileVarRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> variables = 2;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SetProfileVarRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.SetProfileVarRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.SetProfileVarRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.SetProfileVarRequest)
  return target;
}

size_t SetProfileVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.SetProfileVarRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += SetProfileVarRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfileVarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetProfileVarRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfileVarRequest::GetClassData() const { return &_class_data_; }


void SetProfileVarRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetProfileVarRequest*>(&to_msg);
  auto& from = static_cast<const SetProfileVarRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.SetProfileVarRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProfileVarRequest::CopyFrom(const SetProfileVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.SetProfileVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfileVarRequest::IsInitialized() const {
  return true;
}

void SetProfileVarRequest::InternalSwap(SetProfileVarRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProfileVarRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[10]);
}

// ===================================================================

class SetProfileVarResponse::_Internal {
 public:
};

SetProfileVarResponse::SetProfileVarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:fs.SetProfileVarResponse)
}
SetProfileVarResponse::SetProfileVarResponse(const SetProfileVarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetProfileVarResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.SetProfileVarResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfileVarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfileVarResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetProfileVarResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[11]);
}

// ===================================================================

class StopPlaybackRequest::_Internal {
 public:
};

StopPlaybackRequest::StopPlaybackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.StopPlaybackRequest)
}
StopPlaybackRequest::StopPlaybackRequest(const StopPlaybackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopPlaybackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.StopPlaybackRequest)
}

inline void StopPlaybackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopPlaybackRequest::~StopPlaybackRequest() {
  // @@protoc_insertion_point(destructor:fs.StopPlaybackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopPlaybackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void StopPlaybackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopPlaybackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.StopPlaybackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPlaybackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.StopPlaybackRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopPlaybackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.StopPlaybackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.StopPlaybackRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.StopPlaybackRequest)
  return target;
}

size_t StopPlaybackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.StopPlaybackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPlaybackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopPlaybackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPlaybackRequest::GetClassData() const { return &_class_data_; }


void StopPlaybackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopPlaybackRequest*>(&to_msg);
  auto& from = static_cast<const StopPlaybackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.StopPlaybackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPlaybackRequest::CopyFrom(const StopPlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.StopPlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPlaybackRequest::IsInitialized() const {
  return true;
}

void StopPlaybackRequest::InternalSwap(StopPlaybackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPlaybackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[12]);
}

// ===================================================================

class StopPlaybackResponse::_Internal {
 public:
};

StopPlaybackResponse::StopPlaybackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:fs.StopPlaybackResponse)
}
StopPlaybackResponse::StopPlaybackResponse(const StopPlaybackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StopPlaybackResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.StopPlaybackResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPlaybackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPlaybackResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopPlaybackResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[13]);
}

// ===================================================================

BridgeCallRequest_VariablesEntry_DoNotUse::BridgeCallRequest_VariablesEntry_DoNotUse() {}
BridgeCallRequest_VariablesEntry_DoNotUse::BridgeCallRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BridgeCallRequest_VariablesEntry_DoNotUse::MergeFrom(const BridgeCallRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BridgeCallRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[14]);
}

// ===================================================================

class BridgeCallRequest::_Internal {
 public:
};

BridgeCallRequest::BridgeCallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BridgeCallRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.BridgeCallRequest)
}
BridgeCallRequest::BridgeCallRequest(const BridgeCallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeCallRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.leg_a_id_){}
    , decltype(_impl_.leg_b_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.leg_a_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_a_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg_a_id().empty()) {
    _this->_impl_.leg_a_id_.Set(from._internal_leg_a_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.leg_b_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg_b_id().empty()) {
    _this->_impl_.leg_b_id_.Set(from._internal_leg_b_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.BridgeCallRequest)
}

inline void BridgeCallRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.leg_a_id_){}
    , decltype(_impl_.leg_b_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leg_a_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_a_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leg_b_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeCallRequest::~BridgeCallRequest() {
  // @@protoc_insertion_point(destructor:fs.BridgeCallRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BridgeCallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.leg_a_id_.Destroy();
  _impl_.leg_b_id_.Destroy();
}

void BridgeCallRequest::ArenaDtor(void* object) {
  BridgeCallRequest* _this = reinterpret_cast< BridgeCallRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void BridgeCallRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BridgeCallRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.leg_a_id_.ClearToEmpty();
  _impl_.leg_b_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeCallRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string leg_a_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_leg_a_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeCallRequest.leg_a_id"));
        } else
          goto handle_unusual;
        continue;
      // string leg_b_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leg_b_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeCallRequest.leg_b_id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgeCallRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BridgeCallRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string leg_a_id = 1;
  if (!this->_internal_leg_a_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg_a_id().data(), static_cast<int>(this->_internal_leg_a_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeCallRequest.leg_a_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leg_a_id(), target);
  }

  // string leg_b_id = 2;
  if (!this->_internal_leg_b_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg_b_id().data(), static_cast<int>(this->_internal_leg_b_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeCallRequest.leg_b_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leg_b_id(), target);
  }

  // map<string, string> variables = 3;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = BridgeCallRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.BridgeCallRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.BridgeCallRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BridgeCallRequest)
  return target;
}

size_t BridgeCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BridgeCallRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += BridgeCallRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string leg_a_id = 1;
  if (!this->_internal_leg_a_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg_a_id());
  }

  // string leg_b_id = 2;
  if (!this->_internal_leg_b_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg_b_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeCallRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeCallRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeCallRequest::GetClassData() const { return &_class_data_; }


void BridgeCallRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeCallRequest*>(&to_msg);
  auto& from = static_cast<const BridgeCallRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BridgeCallRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_leg_a_id().empty()) {
    _this->_internal_set_leg_a_id(from._internal_leg_a_id());
  }
  if (!from._internal_leg_b_id().empty()) {
    _this->_internal_set_leg_b_id(from._internal_leg_b_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeCallRequest::CopyFrom(const BridgeCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BridgeCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeCallRequest::IsInitialized() const {
  return true;
}

void BridgeCallRequest::InternalSwap(BridgeCallRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_a_id_, lhs_arena,
      &other->_impl_.leg_a_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_b_id_, lhs_arena,
      &other->_impl_.leg_b_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeCallRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[15]);
}

// ===================================================================

class BridgeCallResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const BridgeCallResponse* msg);
};

const ::fs::ErrorExecute&
BridgeCallResponse::_Internal::error(const BridgeCallResponse* msg) {
  return *msg->_impl_.error_;
}
BridgeCallResponse::BridgeCallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BridgeCallResponse)
}
BridgeCallResponse::BridgeCallResponse(const BridgeCallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeCallResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.BridgeCallResponse)
}

inline void BridgeCallResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeCallResponse::~BridgeCallResponse() {
  // @@protoc_insertion_point(destructor:fs.BridgeCallResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BridgeCallResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void BridgeCallResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BridgeCallResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeCallResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeCallResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgeCallResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BridgeCallResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeCallResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BridgeCallResponse)
  return target;
}

size_t BridgeCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BridgeCallResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeCallResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeCallResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeCallResponse::GetClassData() const { return &_class_data_; }


void BridgeCallResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeCallResponse*>(&to_msg);
  auto& from = static_cast<const BridgeCallResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BridgeCallResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeCallResponse::CopyFrom(const BridgeCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BridgeCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeCallResponse::IsInitialized() const {
  return true;
}

void BridgeCallResponse::InternalSwap(BridgeCallResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeCallResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[16]);
}

// ===================================================================

class HoldRequest::_Internal {
 public:
};

HoldRequest::HoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HoldRequest)
}
HoldRequest::HoldRequest(const HoldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HoldRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.HoldRequest)
}

inline void HoldRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HoldRequest::~HoldRequest() {
  // @@protoc_insertion_point(destructor:fs.HoldRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HoldRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
}

void HoldRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HoldRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HoldRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.HoldRequest.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HoldRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HoldRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HoldRequest.id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HoldRequest)
  return target;
}

size_t HoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HoldRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HoldRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HoldRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HoldRequest::GetClassData() const { return &_class_data_; }


void HoldRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HoldRequest*>(&to_msg);
  auto& from = static_cast<const HoldRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HoldRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HoldRequest::CopyFrom(const HoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldRequest::IsInitialized() const {
  return true;
}

void HoldRequest::InternalSwap(HoldRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[17]);
}

// ===================================================================

class HoldResponse::_Internal {
 public:
};

HoldResponse::HoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HoldResponse)
}
HoldResponse::HoldResponse(const HoldResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HoldResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.HoldResponse)
}

inline void HoldResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HoldResponse::~HoldResponse() {
  // @@protoc_insertion_point(destructor:fs.HoldResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HoldResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
}

void HoldResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HoldResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HoldResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HoldResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.HoldResponse.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HoldResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HoldResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HoldResponse.id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HoldResponse)
  return target;
}

size_t HoldResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HoldResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HoldResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HoldResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HoldResponse::GetClassData() const { return &_class_data_; }


void HoldResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HoldResponse*>(&to_msg);
  auto& from = static_cast<const HoldResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HoldResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HoldResponse::CopyFrom(const HoldResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HoldResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldResponse::IsInitialized() const {
  return true;
}

void HoldResponse::InternalSwap(HoldResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[18]);
}

// ===================================================================

class UnHoldRequest::_Internal {
 public:
};

UnHoldRequest::UnHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.UnHoldRequest)
}
UnHoldRequest::UnHoldRequest(const UnHoldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnHoldRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.UnHoldRequest)
}

inline void UnHoldRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnHoldRequest::~UnHoldRequest() {
  // @@protoc_insertion_point(destructor:fs.UnHoldRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnHoldRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
}

void UnHoldRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnHoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.UnHoldRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnHoldRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.UnHoldRequest.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnHoldRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.UnHoldRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.UnHoldRequest.id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.UnHoldRequest)
  return target;
}

size_t UnHoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.UnHoldRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnHoldRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnHoldRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnHoldRequest::GetClassData() const { return &_class_data_; }


void UnHoldRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnHoldRequest*>(&to_msg);
  auto& from = static_cast<const UnHoldRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.UnHoldRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnHoldRequest::CopyFrom(const UnHoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.UnHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnHoldRequest::IsInitialized() const {
  return true;
}

void UnHoldRequest::InternalSwap(UnHoldRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnHoldRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[19]);
}

// ===================================================================

class UnHoldResponse::_Internal {
 public:
};

UnHoldResponse::UnHoldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.UnHoldResponse)
}
UnHoldResponse::UnHoldResponse(const UnHoldResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnHoldResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.UnHoldResponse)
}

inline void UnHoldResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnHoldResponse::~UnHoldResponse() {
  // @@protoc_insertion_point(destructor:fs.UnHoldResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnHoldResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
}

void UnHoldResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnHoldResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.UnHoldResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnHoldResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.UnHoldResponse.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnHoldResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.UnHoldResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.UnHoldResponse.id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.UnHoldResponse)
  return target;
}

size_t UnHoldResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.UnHoldResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnHoldResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnHoldResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnHoldResponse::GetClassData() const { return &_class_data_; }


void UnHoldResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnHoldResponse*>(&to_msg);
  auto& from = static_cast<const UnHoldResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.UnHoldResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnHoldResponse::CopyFrom(const UnHoldResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.UnHoldResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnHoldResponse::IsInitialized() const {
  return true;
}

void UnHoldResponse::InternalSwap(UnHoldResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnHoldResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[20]);
}

// ===================================================================

class HangupManyRequest::_Internal {
 public:
};

HangupManyRequest::HangupManyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HangupManyRequest)
}
HangupManyRequest::HangupManyRequest(const HangupManyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupManyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , decltype(_impl_.cause_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    _this->_impl_.cause_.Set(from._internal_cause(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.HangupManyRequest)
}

inline void HangupManyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , decltype(_impl_.cause_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HangupManyRequest::~HangupManyRequest() {
  // @@protoc_insertion_point(destructor:fs.HangupManyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangupManyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
  _impl_.cause_.Destroy();
}

void HangupManyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupManyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _impl_.cause_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupManyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.HangupManyRequest.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string cause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cause();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.HangupManyRequest.cause"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupManyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupManyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupManyRequest.id");
    target = stream->WriteString(1, s, target);
  }

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cause().data(), static_cast<int>(this->_internal_cause().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupManyRequest.cause");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupManyRequest)
  return target;
}

size_t HangupManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupManyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupManyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupManyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupManyRequest::GetClassData() const { return &_class_data_; }


void HangupManyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupManyRequest*>(&to_msg);
  auto& from = static_cast<const HangupManyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupManyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  if (!from._internal_cause().empty()) {
    _this->_internal_set_cause(from._internal_cause());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupManyRequest::CopyFrom(const HangupManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupManyRequest::IsInitialized() const {
  return true;
}

void HangupManyRequest::InternalSwap(HangupManyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cause_, lhs_arena,
      &other->_impl_.cause_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupManyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[21]);
}

// ===================================================================

class HangupManyResponse::_Internal {
 public:
};

HangupManyResponse::HangupManyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HangupManyResponse)
}
HangupManyResponse::HangupManyResponse(const HangupManyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupManyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){from._impl_.id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fs.HangupManyResponse)
}

inline void HangupManyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HangupManyResponse::~HangupManyResponse() {
  // @@protoc_insertion_point(destructor:fs.HangupManyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangupManyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedPtrField();
}

void HangupManyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupManyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupManyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.HangupManyResponse.id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupManyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupManyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupManyResponse.id");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupManyResponse)
  return target;
}

size_t HangupManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupManyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.id_.size());
  for (int i = 0, n = _impl_.id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.id_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupManyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupManyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupManyResponse::GetClassData() const { return &_class_data_; }


void HangupManyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupManyResponse*>(&to_msg);
  auto& from = static_cast<const HangupManyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupManyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupManyResponse::CopyFrom(const HangupManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupManyResponse::IsInitialized() const {
  return true;
}

void HangupManyResponse::InternalSwap(HangupManyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupManyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[22]);
}

// ===================================================================

QueueRequest_VariablesEntry_DoNotUse::QueueRequest_VariablesEntry_DoNotUse() {}
QueueRequest_VariablesEntry_DoNotUse::QueueRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueueRequest_VariablesEntry_DoNotUse::MergeFrom(const QueueRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueueRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[23]);
}

// ===================================================================

class QueueRequest::_Internal {
 public:
};

QueueRequest::QueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &QueueRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.QueueRequest)
}
QueueRequest::QueueRequest(const QueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.playback_file_){}
    , decltype(_impl_.playback_args_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playback_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playback_file().empty()) {
    _this->_impl_.playback_file_.Set(from._internal_playback_file(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playback_args_ = from._impl_.playback_args_;
  // @@protoc_insertion_point(copy_constructor:fs.QueueRequest)
}

inline void QueueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.playback_file_){}
    , decltype(_impl_.playback_args_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playback_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playback_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueueRequest::~QueueRequest() {
  // @@protoc_insertion_point(destructor:fs.QueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void QueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.id_.Destroy();
  _impl_.playback_file_.Destroy();
}

void QueueRequest::ArenaDtor(void* object) {
  QueueRequest* _this = reinterpret_cast< QueueRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void QueueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.QueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.playback_file_.ClearToEmpty();
  _impl_.playback_args_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.QueueRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string playback_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_playback_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.QueueRequest.playback_file"));
        } else
          goto handle_unusual;
        continue;
      // int32 playback_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playback_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.QueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.QueueRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> variables = 2;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = QueueRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.QueueRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.QueueRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string playback_file = 3;
  if (!this->_internal_playback_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playback_file().data(), static_cast<int>(this->_internal_playback_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.QueueRequest.playback_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playback_file(), target);
  }

  // int32 playback_args = 4;
  if (this->_internal_playback_args() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playback_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.QueueRequest)
  return target;
}

size_t QueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.QueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += QueueRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string playback_file = 3;
  if (!this->_internal_playback_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playback_file());
  }

  // int32 playback_args = 4;
  if (this->_internal_playback_args() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playback_args());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueueRequest::GetClassData() const { return &_class_data_; }


void QueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueueRequest*>(&to_msg);
  auto& from = static_cast<const QueueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.QueueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_playback_file().empty()) {
    _this->_internal_set_playback_file(from._internal_playback_file());
  }
  if (from._internal_playback_args() != 0) {
    _this->_internal_set_playback_args(from._internal_playback_args());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueueRequest::CopyFrom(const QueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.QueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueRequest::IsInitialized() const {
  return true;
}

void QueueRequest::InternalSwap(QueueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playback_file_, lhs_arena,
      &other->_impl_.playback_file_, rhs_arena
  );
  swap(_impl_.playback_args_, other->_impl_.playback_args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[24]);
}

// ===================================================================

class QueueResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const QueueResponse* msg);
};

const ::fs::ErrorExecute&
QueueResponse::_Internal::error(const QueueResponse* msg) {
  return *msg->_impl_.error_;
}
QueueResponse::QueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.QueueResponse)
}
QueueResponse::QueueResponse(const QueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.QueueResponse)
}

inline void QueueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueueResponse::~QueueResponse() {
  // @@protoc_insertion_point(destructor:fs.QueueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void QueueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.QueueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.QueueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.QueueResponse)
  return target;
}

size_t QueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.QueueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueueResponse::GetClassData() const { return &_class_data_; }


void QueueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueueResponse*>(&to_msg);
  auto& from = static_cast<const QueueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.QueueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueueResponse::CopyFrom(const QueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.QueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueResponse::IsInitialized() const {
  return true;
}

void QueueResponse::InternalSwap(QueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[25]);
}

// ===================================================================

class ErrorExecute::_Internal {
 public:
};

ErrorExecute::ErrorExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.ErrorExecute)
}
ErrorExecute::ErrorExecute(const ErrorExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorExecute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:fs.ErrorExecute)
}

inline void ErrorExecute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorExecute::~ErrorExecute() {
  // @@protoc_insertion_point(destructor:fs.ErrorExecute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorExecute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ErrorExecute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.ErrorExecute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorExecute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.ErrorExecute.message"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::fs::ErrorExecute_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorExecute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.ErrorExecute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.ErrorExecute.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .fs.ErrorExecute.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.ErrorExecute)
  return target;
}

size_t ErrorExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.ErrorExecute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .fs.ErrorExecute.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorExecute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorExecute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorExecute::GetClassData() const { return &_class_data_; }


void ErrorExecute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorExecute*>(&to_msg);
  auto& from = static_cast<const ErrorExecute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.ErrorExecute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorExecute::CopyFrom(const ErrorExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.ErrorExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorExecute::IsInitialized() const {
  return true;
}

void ErrorExecute::InternalSwap(ErrorExecute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorExecute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[26]);
}

// ===================================================================

class ExecuteRequest::_Internal {
 public:
};

ExecuteRequest::ExecuteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.ExecuteRequest)
}
ExecuteRequest::ExecuteRequest(const ExecuteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.ExecuteRequest)
}

inline void ExecuteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteRequest::~ExecuteRequest() {
  // @@protoc_insertion_point(destructor:fs.ExecuteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
  _impl_.args_.Destroy();
}

void ExecuteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.ExecuteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.ExecuteRequest.command"));
        } else
          goto handle_unusual;
        continue;
      // string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.ExecuteRequest.args"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.ExecuteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.ExecuteRequest.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.ExecuteRequest.args");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.ExecuteRequest)
  return target;
}

size_t ExecuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.ExecuteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteRequest::GetClassData() const { return &_class_data_; }


void ExecuteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.ExecuteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteRequest::CopyFrom(const ExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.ExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRequest::IsInitialized() const {
  return true;
}

void ExecuteRequest::InternalSwap(ExecuteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[27]);
}

// ===================================================================

class ExecuteResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const ExecuteResponse* msg);
};

const ::fs::ErrorExecute&
ExecuteResponse::_Internal::error(const ExecuteResponse* msg) {
  return *msg->_impl_.error_;
}
ExecuteResponse::ExecuteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.ExecuteResponse)
}
ExecuteResponse::ExecuteResponse(const ExecuteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.ExecuteResponse)
}

inline void ExecuteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteResponse::~ExecuteResponse() {
  // @@protoc_insertion_point(destructor:fs.ExecuteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void ExecuteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.ExecuteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.ExecuteResponse.data"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.ExecuteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.ExecuteResponse.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.ExecuteResponse)
  return target;
}

size_t ExecuteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.ExecuteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteResponse::GetClassData() const { return &_class_data_; }


void ExecuteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.ExecuteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteResponse::CopyFrom(const ExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.ExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteResponse::IsInitialized() const {
  return true;
}

void ExecuteResponse::InternalSwap(ExecuteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[28]);
}

// ===================================================================

HangupRequest_VariablesEntry_DoNotUse::HangupRequest_VariablesEntry_DoNotUse() {}
HangupRequest_VariablesEntry_DoNotUse::HangupRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HangupRequest_VariablesEntry_DoNotUse::MergeFrom(const HangupRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HangupRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[29]);
}

// ===================================================================

class HangupRequest::_Internal {
 public:
};

HangupRequest::HangupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HangupRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.HangupRequest)
}
HangupRequest::HangupRequest(const HangupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.cause_){}
    , decltype(_impl_.reporting_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    _this->_impl_.cause_.Set(from._internal_cause(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.reporting_ = from._impl_.reporting_;
  // @@protoc_insertion_point(copy_constructor:fs.HangupRequest)
}

inline void HangupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.cause_){}
    , decltype(_impl_.reporting_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HangupRequest::~HangupRequest() {
  // @@protoc_insertion_point(destructor:fs.HangupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HangupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.uuid_.Destroy();
  _impl_.cause_.Destroy();
}

void HangupRequest::ArenaDtor(void* object) {
  HangupRequest* _this = reinterpret_cast< HangupRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void HangupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.uuid_.ClearToEmpty();
  _impl_.cause_.ClearToEmpty();
  _impl_.reporting_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.HangupRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string cause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cause();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.HangupRequest.cause"));
        } else
          goto handle_unusual;
        continue;
      // bool reporting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reporting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cause().data(), static_cast<int>(this->_internal_cause().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupRequest.cause");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cause(), target);
  }

  // bool reporting = 3;
  if (this->_internal_reporting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_reporting(), target);
  }

  // map<string, string> variables = 4;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HangupRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.HangupRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.HangupRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupRequest)
  return target;
}

size_t HangupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += HangupRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cause());
  }

  // bool reporting = 3;
  if (this->_internal_reporting() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupRequest::GetClassData() const { return &_class_data_; }


void HangupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupRequest*>(&to_msg);
  auto& from = static_cast<const HangupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_cause().empty()) {
    _this->_internal_set_cause(from._internal_cause());
  }
  if (from._internal_reporting() != 0) {
    _this->_internal_set_reporting(from._internal_reporting());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupRequest::CopyFrom(const HangupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupRequest::IsInitialized() const {
  return true;
}

void HangupRequest::InternalSwap(HangupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cause_, lhs_arena,
      &other->_impl_.cause_, rhs_arena
  );
  swap(_impl_.reporting_, other->_impl_.reporting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[30]);
}

// ===================================================================

class HangupResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const HangupResponse* msg);
};

const ::fs::ErrorExecute&
HangupResponse::_Internal::error(const HangupResponse* msg) {
  return *msg->_impl_.error_;
}
HangupResponse::HangupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HangupResponse)
}
HangupResponse::HangupResponse(const HangupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.HangupResponse)
}

inline void HangupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HangupResponse::~HangupResponse() {
  // @@protoc_insertion_point(destructor:fs.HangupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void HangupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupResponse)
  return target;
}

size_t HangupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupResponse::GetClassData() const { return &_class_data_; }


void HangupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupResponse*>(&to_msg);
  auto& from = static_cast<const HangupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupResponse::CopyFrom(const HangupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupResponse::IsInitialized() const {
  return true;
}

void HangupResponse::InternalSwap(HangupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[31]);
}

// ===================================================================

class OriginateRequest_Extension::_Internal {
 public:
};

OriginateRequest_Extension::OriginateRequest_Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.OriginateRequest.Extension)
}
OriginateRequest_Extension::OriginateRequest_Extension(const OriginateRequest_Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OriginateRequest_Extension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appname_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appname().empty()) {
    _this->_impl_.appname_.Set(from._internal_appname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.OriginateRequest.Extension)
}

inline void OriginateRequest_Extension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appname_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OriginateRequest_Extension::~OriginateRequest_Extension() {
  // @@protoc_insertion_point(destructor:fs.OriginateRequest.Extension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginateRequest_Extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appname_.Destroy();
  _impl_.args_.Destroy();
}

void OriginateRequest_Extension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OriginateRequest_Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.OriginateRequest.Extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appname_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginateRequest_Extension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.Extension.appName"));
        } else
          goto handle_unusual;
        continue;
      // string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.Extension.args"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginateRequest_Extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.OriginateRequest.Extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appName = 1;
  if (!this->_internal_appname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.Extension.appName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appname(), target);
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.Extension.args");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.OriginateRequest.Extension)
  return target;
}

size_t OriginateRequest_Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.OriginateRequest.Extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appName = 1;
  if (!this->_internal_appname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  // string args = 2;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginateRequest_Extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OriginateRequest_Extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginateRequest_Extension::GetClassData() const { return &_class_data_; }


void OriginateRequest_Extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OriginateRequest_Extension*>(&to_msg);
  auto& from = static_cast<const OriginateRequest_Extension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.OriginateRequest.Extension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appname().empty()) {
    _this->_internal_set_appname(from._internal_appname());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginateRequest_Extension::CopyFrom(const OriginateRequest_Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.OriginateRequest.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginateRequest_Extension::IsInitialized() const {
  return true;
}

void OriginateRequest_Extension::InternalSwap(OriginateRequest_Extension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appname_, lhs_arena,
      &other->_impl_.appname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginateRequest_Extension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[32]);
}

// ===================================================================

OriginateRequest_VariablesEntry_DoNotUse::OriginateRequest_VariablesEntry_DoNotUse() {}
OriginateRequest_VariablesEntry_DoNotUse::OriginateRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OriginateRequest_VariablesEntry_DoNotUse::MergeFrom(const OriginateRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OriginateRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[33]);
}

// ===================================================================

class OriginateRequest::_Internal {
 public:
};

OriginateRequest::OriginateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &OriginateRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.OriginateRequest)
}
OriginateRequest::OriginateRequest(const OriginateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OriginateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.extensions_){from._impl_.extensions_}
    , decltype(_impl_.destination_){}
    , decltype(_impl_.callernumber_){}
    , decltype(_impl_.callername_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.dialplan_){}
    , decltype(_impl_.check_id_){}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), 
      _this->GetArenaForAllocation());
  }
  _impl_.callernumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callernumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callernumber().empty()) {
    _this->_impl_.callernumber_.Set(from._internal_callernumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.callername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callername().empty()) {
    _this->_impl_.callername_.Set(from._internal_callername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    _this->_impl_.context_.Set(from._internal_context(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dialplan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialplan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dialplan().empty()) {
    _this->_impl_.dialplan_.Set(from._internal_dialplan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.check_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_id().empty()) {
    _this->_impl_.check_id_.Set(from._internal_check_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.strategy_, &from._impl_.strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.strategy_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:fs.OriginateRequest)
}

inline void OriginateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.extensions_){arena}
    , decltype(_impl_.destination_){}
    , decltype(_impl_.callernumber_){}
    , decltype(_impl_.callername_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.dialplan_){}
    , decltype(_impl_.check_id_){}
    , decltype(_impl_.strategy_){0}
    , decltype(_impl_.timeout_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callernumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callernumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.callername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dialplan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dialplan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.check_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OriginateRequest::~OriginateRequest() {
  // @@protoc_insertion_point(destructor:fs.OriginateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OriginateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.extensions_.~RepeatedPtrField();
  _impl_.destination_.Destroy();
  _impl_.callernumber_.Destroy();
  _impl_.callername_.Destroy();
  _impl_.context_.Destroy();
  _impl_.dialplan_.Destroy();
  _impl_.check_id_.Destroy();
}

void OriginateRequest::ArenaDtor(void* object) {
  OriginateRequest* _this = reinterpret_cast< OriginateRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void OriginateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OriginateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.OriginateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.extensions_.Clear();
  _impl_.destination_.ClearToEmpty();
  _impl_.callernumber_.ClearToEmpty();
  _impl_.callername_.ClearToEmpty();
  _impl_.context_.ClearToEmpty();
  _impl_.dialplan_.ClearToEmpty();
  _impl_.check_id_.ClearToEmpty();
  ::memset(&_impl_.strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.strategy_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .fs.OriginateRequest.Strategy strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::fs::OriginateRequest_Strategy>(val));
        } else
          goto handle_unusual;
        continue;
      // string destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.destination"));
        } else
          goto handle_unusual;
        continue;
      // int32 timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string callerNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_callernumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.callerNumber"));
        } else
          goto handle_unusual;
        continue;
      // string callerName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_callername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.callerName"));
        } else
          goto handle_unusual;
        continue;
      // string context = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.context"));
        } else
          goto handle_unusual;
        continue;
      // string dialplan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_dialplan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.dialplan"));
        } else
          goto handle_unusual;
        continue;
      // repeated .fs.OriginateRequest.Extension extensions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string check_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_check_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateRequest.check_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.OriginateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> variables = 1;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OriginateRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.OriginateRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.OriginateRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string endpoints = 2;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.endpoints");
    target = stream->WriteString(2, s, target);
  }

  // .fs.OriginateRequest.Strategy strategy = 3;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_strategy(), target);
  }

  // string destination = 4;
  if (!this->_internal_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_destination(), target);
  }

  // int32 timeout = 5;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_timeout(), target);
  }

  // string callerNumber = 6;
  if (!this->_internal_callernumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callernumber().data(), static_cast<int>(this->_internal_callernumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.callerNumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_callernumber(), target);
  }

  // string callerName = 7;
  if (!this->_internal_callername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callername().data(), static_cast<int>(this->_internal_callername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.callerName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_callername(), target);
  }

  // string context = 8;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.context");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_context(), target);
  }

  // string dialplan = 9;
  if (!this->_internal_dialplan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dialplan().data(), static_cast<int>(this->_internal_dialplan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.dialplan");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_dialplan(), target);
  }

  // repeated .fs.OriginateRequest.Extension extensions = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_extensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string check_id = 11;
  if (!this->_internal_check_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_id().data(), static_cast<int>(this->_internal_check_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateRequest.check_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_check_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.OriginateRequest)
  return target;
}

size_t OriginateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.OriginateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += OriginateRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string endpoints = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // repeated .fs.OriginateRequest.Extension extensions = 10;
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->_impl_.extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string destination = 4;
  if (!this->_internal_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // string callerNumber = 6;
  if (!this->_internal_callernumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callernumber());
  }

  // string callerName = 7;
  if (!this->_internal_callername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callername());
  }

  // string context = 8;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  // string dialplan = 9;
  if (!this->_internal_dialplan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dialplan());
  }

  // string check_id = 11;
  if (!this->_internal_check_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_id());
  }

  // .fs.OriginateRequest.Strategy strategy = 3;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  // int32 timeout = 5;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OriginateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginateRequest::GetClassData() const { return &_class_data_; }


void OriginateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OriginateRequest*>(&to_msg);
  auto& from = static_cast<const OriginateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.OriginateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  _this->_impl_.extensions_.MergeFrom(from._impl_.extensions_);
  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_callernumber().empty()) {
    _this->_internal_set_callernumber(from._internal_callernumber());
  }
  if (!from._internal_callername().empty()) {
    _this->_internal_set_callername(from._internal_callername());
  }
  if (!from._internal_context().empty()) {
    _this->_internal_set_context(from._internal_context());
  }
  if (!from._internal_dialplan().empty()) {
    _this->_internal_set_dialplan(from._internal_dialplan());
  }
  if (!from._internal_check_id().empty()) {
    _this->_internal_set_check_id(from._internal_check_id());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginateRequest::CopyFrom(const OriginateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.OriginateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginateRequest::IsInitialized() const {
  return true;
}

void OriginateRequest::InternalSwap(OriginateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  _impl_.extensions_.InternalSwap(&other->_impl_.extensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_, lhs_arena,
      &other->_impl_.destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callernumber_, lhs_arena,
      &other->_impl_.callernumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callername_, lhs_arena,
      &other->_impl_.callername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_, lhs_arena,
      &other->_impl_.context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dialplan_, lhs_arena,
      &other->_impl_.dialplan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.check_id_, lhs_arena,
      &other->_impl_.check_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginateRequest, _impl_.timeout_)
      + sizeof(OriginateRequest::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(OriginateRequest, _impl_.strategy_)>(
          reinterpret_cast<char*>(&_impl_.strategy_),
          reinterpret_cast<char*>(&other->_impl_.strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[34]);
}

// ===================================================================

class OriginateResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const OriginateResponse* msg);
};

const ::fs::ErrorExecute&
OriginateResponse::_Internal::error(const OriginateResponse* msg) {
  return *msg->_impl_.error_;
}
OriginateResponse::OriginateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.OriginateResponse)
}
OriginateResponse::OriginateResponse(const OriginateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OriginateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:fs.OriginateResponse)
}

inline void OriginateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OriginateResponse::~OriginateResponse() {
  // @@protoc_insertion_point(destructor:fs.OriginateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void OriginateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OriginateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.OriginateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.OriginateResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.OriginateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.OriginateResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // int32 error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.OriginateResponse)
  return target;
}

size_t OriginateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.OriginateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // int32 error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OriginateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginateResponse::GetClassData() const { return &_class_data_; }


void OriginateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OriginateResponse*>(&to_msg);
  auto& from = static_cast<const OriginateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.OriginateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginateResponse::CopyFrom(const OriginateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.OriginateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginateResponse::IsInitialized() const {
  return true;
}

void OriginateResponse::InternalSwap(OriginateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginateResponse, _impl_.error_code_)
      + sizeof(OriginateResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(OriginateResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[35]);
}

// ===================================================================

class BridgeRequest::_Internal {
 public:
};

BridgeRequest::BridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BridgeRequest)
}
BridgeRequest::BridgeRequest(const BridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leg_a_id_){}
    , decltype(_impl_.leg_b_id_){}
    , decltype(_impl_.leg_b_reserve_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leg_a_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_a_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg_a_id().empty()) {
    _this->_impl_.leg_a_id_.Set(from._internal_leg_a_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.leg_b_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg_b_id().empty()) {
    _this->_impl_.leg_b_id_.Set(from._internal_leg_b_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.leg_b_reserve_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_reserve_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leg_b_reserve_id().empty()) {
    _this->_impl_.leg_b_reserve_id_.Set(from._internal_leg_b_reserve_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.BridgeRequest)
}

inline void BridgeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leg_a_id_){}
    , decltype(_impl_.leg_b_id_){}
    , decltype(_impl_.leg_b_reserve_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leg_a_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_a_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leg_b_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leg_b_reserve_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leg_b_reserve_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeRequest::~BridgeRequest() {
  // @@protoc_insertion_point(destructor:fs.BridgeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leg_a_id_.Destroy();
  _impl_.leg_b_id_.Destroy();
  _impl_.leg_b_reserve_id_.Destroy();
}

void BridgeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BridgeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leg_a_id_.ClearToEmpty();
  _impl_.leg_b_id_.ClearToEmpty();
  _impl_.leg_b_reserve_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string leg_a_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_leg_a_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeRequest.leg_a_id"));
        } else
          goto handle_unusual;
        continue;
      // string leg_b_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leg_b_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeRequest.leg_b_id"));
        } else
          goto handle_unusual;
        continue;
      // string leg_b_reserve_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_leg_b_reserve_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeRequest.leg_b_reserve_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BridgeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string leg_a_id = 1;
  if (!this->_internal_leg_a_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg_a_id().data(), static_cast<int>(this->_internal_leg_a_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeRequest.leg_a_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leg_a_id(), target);
  }

  // string leg_b_id = 2;
  if (!this->_internal_leg_b_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg_b_id().data(), static_cast<int>(this->_internal_leg_b_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeRequest.leg_b_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leg_b_id(), target);
  }

  // string leg_b_reserve_id = 3;
  if (!this->_internal_leg_b_reserve_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leg_b_reserve_id().data(), static_cast<int>(this->_internal_leg_b_reserve_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeRequest.leg_b_reserve_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leg_b_reserve_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BridgeRequest)
  return target;
}

size_t BridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BridgeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leg_a_id = 1;
  if (!this->_internal_leg_a_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg_a_id());
  }

  // string leg_b_id = 2;
  if (!this->_internal_leg_b_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg_b_id());
  }

  // string leg_b_reserve_id = 3;
  if (!this->_internal_leg_b_reserve_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leg_b_reserve_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeRequest::GetClassData() const { return &_class_data_; }


void BridgeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeRequest*>(&to_msg);
  auto& from = static_cast<const BridgeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BridgeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_leg_a_id().empty()) {
    _this->_internal_set_leg_a_id(from._internal_leg_a_id());
  }
  if (!from._internal_leg_b_id().empty()) {
    _this->_internal_set_leg_b_id(from._internal_leg_b_id());
  }
  if (!from._internal_leg_b_reserve_id().empty()) {
    _this->_internal_set_leg_b_reserve_id(from._internal_leg_b_reserve_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeRequest::CopyFrom(const BridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeRequest::IsInitialized() const {
  return true;
}

void BridgeRequest::InternalSwap(BridgeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_a_id_, lhs_arena,
      &other->_impl_.leg_a_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_b_id_, lhs_arena,
      &other->_impl_.leg_b_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leg_b_reserve_id_, lhs_arena,
      &other->_impl_.leg_b_reserve_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[36]);
}

// ===================================================================

class BridgeResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const BridgeResponse* msg);
};

const ::fs::ErrorExecute&
BridgeResponse::_Internal::error(const BridgeResponse* msg) {
  return *msg->_impl_.error_;
}
BridgeResponse::BridgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.BridgeResponse)
}
BridgeResponse::BridgeResponse(const BridgeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.BridgeResponse)
}

inline void BridgeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeResponse::~BridgeResponse() {
  // @@protoc_insertion_point(destructor:fs.BridgeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BridgeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void BridgeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.BridgeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.BridgeResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .fs.ErrorExecute error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BridgeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.BridgeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.BridgeResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.BridgeResponse)
  return target;
}

size_t BridgeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.BridgeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .fs.ErrorExecute error = 2;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeResponse::GetClassData() const { return &_class_data_; }


void BridgeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeResponse*>(&to_msg);
  auto& from = static_cast<const BridgeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.BridgeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeResponse::CopyFrom(const BridgeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.BridgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeResponse::IsInitialized() const {
  return true;
}

void BridgeResponse::InternalSwap(BridgeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[37]);
}

// ===================================================================

SetVariablesRequest_VariablesEntry_DoNotUse::SetVariablesRequest_VariablesEntry_DoNotUse() {}
SetVariablesRequest_VariablesEntry_DoNotUse::SetVariablesRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetVariablesRequest_VariablesEntry_DoNotUse::MergeFrom(const SetVariablesRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetVariablesRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[38]);
}

// ===================================================================

class SetVariablesRequest::_Internal {
 public:
};

SetVariablesRequest::SetVariablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SetVariablesRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.SetVariablesRequest)
}
SetVariablesRequest::SetVariablesRequest(const SetVariablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVariablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.SetVariablesRequest)
}

inline void SetVariablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetVariablesRequest::~SetVariablesRequest() {
  // @@protoc_insertion_point(destructor:fs.SetVariablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SetVariablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.uuid_.Destroy();
}

void SetVariablesRequest::ArenaDtor(void* object) {
  SetVariablesRequest* _this = reinterpret_cast< SetVariablesRequest* >(object);
  _this->_impl_.variables_.Destruct();
}
void SetVariablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVariablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.SetVariablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVariablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.SetVariablesRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVariablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.SetVariablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.SetVariablesRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // map<string, string> variables = 2;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SetVariablesRequest_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.SetVariablesRequest.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.SetVariablesRequest.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.SetVariablesRequest)
  return target;
}

size_t SetVariablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.SetVariablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += SetVariablesRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVariablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVariablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVariablesRequest::GetClassData() const { return &_class_data_; }


void SetVariablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVariablesRequest*>(&to_msg);
  auto& from = static_cast<const SetVariablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.SetVariablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVariablesRequest::CopyFrom(const SetVariablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.SetVariablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVariablesRequest::IsInitialized() const {
  return true;
}

void SetVariablesRequest::InternalSwap(SetVariablesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVariablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[39]);
}

// ===================================================================

class SetVariablesResponse::_Internal {
 public:
  static const ::fs::ErrorExecute& error(const SetVariablesResponse* msg);
};

const ::fs::ErrorExecute&
SetVariablesResponse::_Internal::error(const SetVariablesResponse* msg) {
  return *msg->_impl_.error_;
}
SetVariablesResponse::SetVariablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.SetVariablesResponse)
}
SetVariablesResponse::SetVariablesResponse(const SetVariablesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVariablesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::fs::ErrorExecute(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:fs.SetVariablesResponse)
}

inline void SetVariablesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetVariablesResponse::~SetVariablesResponse() {
  // @@protoc_insertion_point(destructor:fs.SetVariablesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVariablesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void SetVariablesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVariablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.SetVariablesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVariablesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .fs.ErrorExecute error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVariablesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.SetVariablesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.SetVariablesResponse)
  return target;
}

size_t SetVariablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.SetVariablesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fs.ErrorExecute error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVariablesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVariablesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVariablesResponse::GetClassData() const { return &_class_data_; }


void SetVariablesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVariablesResponse*>(&to_msg);
  auto& from = static_cast<const SetVariablesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.SetVariablesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::fs::ErrorExecute::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVariablesResponse::CopyFrom(const SetVariablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.SetVariablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVariablesResponse::IsInitialized() const {
  return true;
}

void SetVariablesResponse::InternalSwap(SetVariablesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVariablesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[40]);
}

// ===================================================================

HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse() {}
HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::MergeFrom(const HangupMatchingVarsReqeust_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[41]);
}

// ===================================================================

class HangupMatchingVarsReqeust::_Internal {
 public:
};

HangupMatchingVarsReqeust::HangupMatchingVarsReqeust(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HangupMatchingVarsReqeust::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fs.HangupMatchingVarsReqeust)
}
HangupMatchingVarsReqeust::HangupMatchingVarsReqeust(const HangupMatchingVarsReqeust& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupMatchingVarsReqeust* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{}
    , decltype(_impl_.cause_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    _this->_impl_.cause_.Set(from._internal_cause(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fs.HangupMatchingVarsReqeust)
}

inline void HangupMatchingVarsReqeust::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.variables_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.cause_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HangupMatchingVarsReqeust::~HangupMatchingVarsReqeust() {
  // @@protoc_insertion_point(destructor:fs.HangupMatchingVarsReqeust)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HangupMatchingVarsReqeust::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.Destruct();
  _impl_.variables_.~MapField();
  _impl_.cause_.Destroy();
}

void HangupMatchingVarsReqeust::ArenaDtor(void* object) {
  HangupMatchingVarsReqeust* _this = reinterpret_cast< HangupMatchingVarsReqeust* >(object);
  _this->_impl_.variables_.Destruct();
}
void HangupMatchingVarsReqeust::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupMatchingVarsReqeust::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupMatchingVarsReqeust)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.cause_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupMatchingVarsReqeust::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cause();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fs.HangupMatchingVarsReqeust.cause"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupMatchingVarsReqeust::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupMatchingVarsReqeust)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cause = 1;
  if (!this->_internal_cause().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cause().data(), static_cast<int>(this->_internal_cause().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fs.HangupMatchingVarsReqeust.cause");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cause(), target);
  }

  // map<string, string> variables = 2;
  if (!this->_internal_variables().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variables();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.HangupMatchingVarsReqeust.VariablesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fs.HangupMatchingVarsReqeust.VariablesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupMatchingVarsReqeust)
  return target;
}

size_t HangupMatchingVarsReqeust::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupMatchingVarsReqeust)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += HangupMatchingVarsReqeust_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string cause = 1;
  if (!this->_internal_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupMatchingVarsReqeust::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupMatchingVarsReqeust::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupMatchingVarsReqeust::GetClassData() const { return &_class_data_; }


void HangupMatchingVarsReqeust::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupMatchingVarsReqeust*>(&to_msg);
  auto& from = static_cast<const HangupMatchingVarsReqeust&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupMatchingVarsReqeust)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (!from._internal_cause().empty()) {
    _this->_internal_set_cause(from._internal_cause());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupMatchingVarsReqeust::CopyFrom(const HangupMatchingVarsReqeust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupMatchingVarsReqeust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupMatchingVarsReqeust::IsInitialized() const {
  return true;
}

void HangupMatchingVarsReqeust::InternalSwap(HangupMatchingVarsReqeust* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cause_, lhs_arena,
      &other->_impl_.cause_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupMatchingVarsReqeust::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[42]);
}

// ===================================================================

class HangupMatchingVarsResponse::_Internal {
 public:
};

HangupMatchingVarsResponse::HangupMatchingVarsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fs.HangupMatchingVarsResponse)
}
HangupMatchingVarsResponse::HangupMatchingVarsResponse(const HangupMatchingVarsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HangupMatchingVarsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:fs.HangupMatchingVarsResponse)
}

inline void HangupMatchingVarsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HangupMatchingVarsResponse::~HangupMatchingVarsResponse() {
  // @@protoc_insertion_point(destructor:fs.HangupMatchingVarsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HangupMatchingVarsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HangupMatchingVarsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HangupMatchingVarsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fs.HangupMatchingVarsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HangupMatchingVarsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HangupMatchingVarsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fs.HangupMatchingVarsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fs.HangupMatchingVarsResponse)
  return target;
}

size_t HangupMatchingVarsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fs.HangupMatchingVarsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HangupMatchingVarsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HangupMatchingVarsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HangupMatchingVarsResponse::GetClassData() const { return &_class_data_; }


void HangupMatchingVarsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HangupMatchingVarsResponse*>(&to_msg);
  auto& from = static_cast<const HangupMatchingVarsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fs.HangupMatchingVarsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HangupMatchingVarsResponse::CopyFrom(const HangupMatchingVarsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fs.HangupMatchingVarsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangupMatchingVarsResponse::IsInitialized() const {
  return true;
}

void HangupMatchingVarsResponse::InternalSwap(HangupMatchingVarsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HangupMatchingVarsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fs_2eproto_getter, &descriptor_table_fs_2eproto_once,
      file_level_metadata_fs_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fs::BlindTransferRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::BlindTransferRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BlindTransferRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BlindTransferRequest*
Arena::CreateMaybeMessage< ::fs::BlindTransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BlindTransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BlindTransferResponse*
Arena::CreateMaybeMessage< ::fs::BlindTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BlindTransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetEavesdropStateRequest*
Arena::CreateMaybeMessage< ::fs::SetEavesdropStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetEavesdropStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetEavesdropStateResponse*
Arena::CreateMaybeMessage< ::fs::SetEavesdropStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetEavesdropStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BroadcastRequest*
Arena::CreateMaybeMessage< ::fs::BroadcastRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BroadcastResponse*
Arena::CreateMaybeMessage< ::fs::BroadcastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::ConfirmPushRequest*
Arena::CreateMaybeMessage< ::fs::ConfirmPushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::ConfirmPushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::ConfirmPushResponse*
Arena::CreateMaybeMessage< ::fs::ConfirmPushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::ConfirmPushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetProfileVarRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::SetProfileVarRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetProfileVarRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetProfileVarRequest*
Arena::CreateMaybeMessage< ::fs::SetProfileVarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetProfileVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetProfileVarResponse*
Arena::CreateMaybeMessage< ::fs::SetProfileVarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetProfileVarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::StopPlaybackRequest*
Arena::CreateMaybeMessage< ::fs::StopPlaybackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::StopPlaybackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::StopPlaybackResponse*
Arena::CreateMaybeMessage< ::fs::StopPlaybackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::StopPlaybackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BridgeCallRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::BridgeCallRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BridgeCallRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BridgeCallRequest*
Arena::CreateMaybeMessage< ::fs::BridgeCallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BridgeCallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BridgeCallResponse*
Arena::CreateMaybeMessage< ::fs::BridgeCallResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BridgeCallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HoldRequest*
Arena::CreateMaybeMessage< ::fs::HoldRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HoldResponse*
Arena::CreateMaybeMessage< ::fs::HoldResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HoldResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::UnHoldRequest*
Arena::CreateMaybeMessage< ::fs::UnHoldRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::UnHoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::UnHoldResponse*
Arena::CreateMaybeMessage< ::fs::UnHoldResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::UnHoldResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupManyRequest*
Arena::CreateMaybeMessage< ::fs::HangupManyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupManyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupManyResponse*
Arena::CreateMaybeMessage< ::fs::HangupManyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupManyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::QueueRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::QueueRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::QueueRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::QueueRequest*
Arena::CreateMaybeMessage< ::fs::QueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::QueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::QueueResponse*
Arena::CreateMaybeMessage< ::fs::QueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::QueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::ErrorExecute*
Arena::CreateMaybeMessage< ::fs::ErrorExecute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::ErrorExecute >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::ExecuteRequest*
Arena::CreateMaybeMessage< ::fs::ExecuteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::ExecuteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::ExecuteResponse*
Arena::CreateMaybeMessage< ::fs::ExecuteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::ExecuteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::HangupRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupRequest*
Arena::CreateMaybeMessage< ::fs::HangupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupResponse*
Arena::CreateMaybeMessage< ::fs::HangupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::OriginateRequest_Extension*
Arena::CreateMaybeMessage< ::fs::OriginateRequest_Extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::OriginateRequest_Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::OriginateRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::OriginateRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::OriginateRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::OriginateRequest*
Arena::CreateMaybeMessage< ::fs::OriginateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::OriginateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::OriginateResponse*
Arena::CreateMaybeMessage< ::fs::OriginateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::OriginateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BridgeRequest*
Arena::CreateMaybeMessage< ::fs::BridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::BridgeResponse*
Arena::CreateMaybeMessage< ::fs::BridgeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::BridgeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetVariablesRequest_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::SetVariablesRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetVariablesRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetVariablesRequest*
Arena::CreateMaybeMessage< ::fs::SetVariablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetVariablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::SetVariablesResponse*
Arena::CreateMaybeMessage< ::fs::SetVariablesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::SetVariablesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupMatchingVarsReqeust_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupMatchingVarsReqeust*
Arena::CreateMaybeMessage< ::fs::HangupMatchingVarsReqeust >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupMatchingVarsReqeust >(arena);
}
template<> PROTOBUF_NOINLINE ::fs::HangupMatchingVarsResponse*
Arena::CreateMaybeMessage< ::fs::HangupMatchingVarsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fs::HangupMatchingVarsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
