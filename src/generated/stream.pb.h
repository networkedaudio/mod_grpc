// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_2eproto;
namespace amd {
class StreamPCMRequest;
struct StreamPCMRequestDefaultTypeInternal;
extern StreamPCMRequestDefaultTypeInternal _StreamPCMRequest_default_instance_;
class StreamPCMRequest_Metadata;
struct StreamPCMRequest_MetadataDefaultTypeInternal;
extern StreamPCMRequest_MetadataDefaultTypeInternal _StreamPCMRequest_Metadata_default_instance_;
class StreamPCMResponse;
struct StreamPCMResponseDefaultTypeInternal;
extern StreamPCMResponseDefaultTypeInternal _StreamPCMResponse_default_instance_;
}  // namespace amd
PROTOBUF_NAMESPACE_OPEN
template<> ::amd::StreamPCMRequest* Arena::CreateMaybeMessage<::amd::StreamPCMRequest>(Arena*);
template<> ::amd::StreamPCMRequest_Metadata* Arena::CreateMaybeMessage<::amd::StreamPCMRequest_Metadata>(Arena*);
template<> ::amd::StreamPCMResponse* Arena::CreateMaybeMessage<::amd::StreamPCMResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amd {

enum UploadStatusCode : int {
  Unknown = 0,
  Ok = 1,
  Failed = 2,
  UploadStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UploadStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UploadStatusCode_IsValid(int value);
constexpr UploadStatusCode UploadStatusCode_MIN = Unknown;
constexpr UploadStatusCode UploadStatusCode_MAX = Failed;
constexpr int UploadStatusCode_ARRAYSIZE = UploadStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadStatusCode_descriptor();
template<typename T>
inline const std::string& UploadStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UploadStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UploadStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UploadStatusCode_descriptor(), enum_t_value);
}
inline bool UploadStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UploadStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UploadStatusCode>(
    UploadStatusCode_descriptor(), name, value);
}
// ===================================================================

class StreamPCMRequest_Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amd.StreamPCMRequest.Metadata) */ {
 public:
  inline StreamPCMRequest_Metadata() : StreamPCMRequest_Metadata(nullptr) {}
  ~StreamPCMRequest_Metadata() override;
  explicit PROTOBUF_CONSTEXPR StreamPCMRequest_Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPCMRequest_Metadata(const StreamPCMRequest_Metadata& from);
  StreamPCMRequest_Metadata(StreamPCMRequest_Metadata&& from) noexcept
    : StreamPCMRequest_Metadata() {
    *this = ::std::move(from);
  }

  inline StreamPCMRequest_Metadata& operator=(const StreamPCMRequest_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMRequest_Metadata& operator=(StreamPCMRequest_Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMRequest_Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPCMRequest_Metadata* internal_default_instance() {
    return reinterpret_cast<const StreamPCMRequest_Metadata*>(
               &_StreamPCMRequest_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamPCMRequest_Metadata& a, StreamPCMRequest_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPCMRequest_Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMRequest_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMRequest_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPCMRequest_Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPCMRequest_Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamPCMRequest_Metadata& from) {
    StreamPCMRequest_Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPCMRequest_Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amd.StreamPCMRequest.Metadata";
  }
  protected:
  explicit StreamPCMRequest_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kUuidFieldNumber = 4,
    kDomainIdFieldNumber = 1,
    kSampleRateFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mime_type = 3;
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // string uuid = 4;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int64 domain_id = 1;
  void clear_domain_id();
  int64_t domain_id() const;
  void set_domain_id(int64_t value);
  private:
  int64_t _internal_domain_id() const;
  void _internal_set_domain_id(int64_t value);
  public:

  // int32 sample_rate = 5;
  void clear_sample_rate();
  int32_t sample_rate() const;
  void set_sample_rate(int32_t value);
  private:
  int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:amd.StreamPCMRequest.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int64_t domain_id_;
    int32_t sample_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamPCMRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amd.StreamPCMRequest) */ {
 public:
  inline StreamPCMRequest() : StreamPCMRequest(nullptr) {}
  ~StreamPCMRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamPCMRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPCMRequest(const StreamPCMRequest& from);
  StreamPCMRequest(StreamPCMRequest&& from) noexcept
    : StreamPCMRequest() {
    *this = ::std::move(from);
  }

  inline StreamPCMRequest& operator=(const StreamPCMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMRequest& operator=(StreamPCMRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kMetadata = 1,
    kChunk = 2,
    DATA_NOT_SET = 0,
  };

  static inline const StreamPCMRequest* internal_default_instance() {
    return reinterpret_cast<const StreamPCMRequest*>(
               &_StreamPCMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamPCMRequest& a, StreamPCMRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPCMRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPCMRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPCMRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamPCMRequest& from) {
    StreamPCMRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPCMRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amd.StreamPCMRequest";
  }
  protected:
  explicit StreamPCMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamPCMRequest_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kVadFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // int32 vad = 3;
  void clear_vad();
  int32_t vad() const;
  void set_vad(int32_t value);
  private:
  int32_t _internal_vad() const;
  void _internal_set_vad(int32_t value);
  public:

  // .amd.StreamPCMRequest.Metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::amd::StreamPCMRequest_Metadata& metadata() const;
  PROTOBUF_NODISCARD ::amd::StreamPCMRequest_Metadata* release_metadata();
  ::amd::StreamPCMRequest_Metadata* mutable_metadata();
  void set_allocated_metadata(::amd::StreamPCMRequest_Metadata* metadata);
  private:
  const ::amd::StreamPCMRequest_Metadata& _internal_metadata() const;
  ::amd::StreamPCMRequest_Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::amd::StreamPCMRequest_Metadata* metadata);
  ::amd::StreamPCMRequest_Metadata* unsafe_arena_release_metadata();

  // bytes chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:amd.StreamPCMRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_chunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t vad_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::amd::StreamPCMRequest_Metadata* metadata_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamPCMResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amd.StreamPCMResponse) */ {
 public:
  inline StreamPCMResponse() : StreamPCMResponse(nullptr) {}
  ~StreamPCMResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamPCMResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPCMResponse(const StreamPCMResponse& from);
  StreamPCMResponse(StreamPCMResponse&& from) noexcept
    : StreamPCMResponse() {
    *this = ::std::move(from);
  }

  inline StreamPCMResponse& operator=(const StreamPCMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMResponse& operator=(StreamPCMResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPCMResponse* internal_default_instance() {
    return reinterpret_cast<const StreamPCMResponse*>(
               &_StreamPCMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamPCMResponse& a, StreamPCMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPCMResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPCMResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPCMResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamPCMResponse& from) {
    StreamPCMResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPCMResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amd.StreamPCMResponse";
  }
  protected:
  explicit StreamPCMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated string results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  const std::string& results(int index) const;
  std::string* mutable_results(int index);
  void set_results(int index, const std::string& value);
  void set_results(int index, std::string&& value);
  void set_results(int index, const char* value);
  void set_results(int index, const char* value, size_t size);
  std::string* add_results();
  void add_results(const std::string& value);
  void add_results(std::string&& value);
  void add_results(const char* value);
  void add_results(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& results() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_results();
  private:
  const std::string& _internal_results(int index) const;
  std::string* _internal_add_results();
  public:

  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:amd.StreamPCMResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamPCMRequest_Metadata

// int64 domain_id = 1;
inline void StreamPCMRequest_Metadata::clear_domain_id() {
  _impl_.domain_id_ = int64_t{0};
}
inline int64_t StreamPCMRequest_Metadata::_internal_domain_id() const {
  return _impl_.domain_id_;
}
inline int64_t StreamPCMRequest_Metadata::domain_id() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.domain_id)
  return _internal_domain_id();
}
inline void StreamPCMRequest_Metadata::_internal_set_domain_id(int64_t value) {
  
  _impl_.domain_id_ = value;
}
inline void StreamPCMRequest_Metadata::set_domain_id(int64_t value) {
  _internal_set_domain_id(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.domain_id)
}

// string name = 2;
inline void StreamPCMRequest_Metadata::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::name() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPCMRequest_Metadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.name)
}
inline std::string* StreamPCMRequest_Metadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.name)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::release_name() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.name)
  return _impl_.name_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.name)
}

// string mime_type = 3;
inline void StreamPCMRequest_Metadata::clear_mime_type() {
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::mime_type() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPCMRequest_Metadata::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.mime_type)
}
inline std::string* StreamPCMRequest_Metadata::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.mime_type)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_mime_type() const {
  return _impl_.mime_type_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_mime_type(const std::string& value) {
  
  _impl_.mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_mime_type() {
  
  return _impl_.mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::release_mime_type() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.mime_type)
  return _impl_.mime_type_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  _impl_.mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.mime_type)
}

// string uuid = 4;
inline void StreamPCMRequest_Metadata::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::uuid() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPCMRequest_Metadata::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.uuid)
}
inline std::string* StreamPCMRequest_Metadata::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.uuid)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamPCMRequest_Metadata::release_uuid() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.uuid)
  return _impl_.uuid_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.uuid)
}

// int32 sample_rate = 5;
inline void StreamPCMRequest_Metadata::clear_sample_rate() {
  _impl_.sample_rate_ = 0;
}
inline int32_t StreamPCMRequest_Metadata::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline int32_t StreamPCMRequest_Metadata::sample_rate() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.sample_rate)
  return _internal_sample_rate();
}
inline void StreamPCMRequest_Metadata::_internal_set_sample_rate(int32_t value) {
  
  _impl_.sample_rate_ = value;
}
inline void StreamPCMRequest_Metadata::set_sample_rate(int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.sample_rate)
}

// -------------------------------------------------------------------

// StreamPCMRequest

// .amd.StreamPCMRequest.Metadata metadata = 1;
inline bool StreamPCMRequest::_internal_has_metadata() const {
  return data_case() == kMetadata;
}
inline bool StreamPCMRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void StreamPCMRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void StreamPCMRequest::clear_metadata() {
  if (_internal_has_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.metadata_;
    }
    clear_has_data();
  }
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_data();
    ::amd::StreamPCMRequest_Metadata* temp = _impl_.data_.metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::amd::StreamPCMRequest_Metadata& StreamPCMRequest::_internal_metadata() const {
  return _internal_has_metadata()
      ? *_impl_.data_.metadata_
      : reinterpret_cast< ::amd::StreamPCMRequest_Metadata&>(::amd::_StreamPCMRequest_Metadata_default_instance_);
}
inline const ::amd::StreamPCMRequest_Metadata& StreamPCMRequest::metadata() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.metadata)
  return _internal_metadata();
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amd.StreamPCMRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_data();
    ::amd::StreamPCMRequest_Metadata* temp = _impl_.data_.metadata_;
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamPCMRequest::unsafe_arena_set_allocated_metadata(::amd::StreamPCMRequest_Metadata* metadata) {
  clear_data();
  if (metadata) {
    set_has_metadata();
    _impl_.data_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amd.StreamPCMRequest.metadata)
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::_internal_mutable_metadata() {
  if (!_internal_has_metadata()) {
    clear_data();
    set_has_metadata();
    _impl_.data_.metadata_ = CreateMaybeMessage< ::amd::StreamPCMRequest_Metadata >(GetArenaForAllocation());
  }
  return _impl_.data_.metadata_;
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::mutable_metadata() {
  ::amd::StreamPCMRequest_Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.metadata)
  return _msg;
}

// bytes chunk = 2;
inline bool StreamPCMRequest::_internal_has_chunk() const {
  return data_case() == kChunk;
}
inline bool StreamPCMRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline void StreamPCMRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void StreamPCMRequest::clear_chunk() {
  if (_internal_has_chunk()) {
    _impl_.data_.chunk_.Destroy();
    clear_has_data();
  }
}
inline const std::string& StreamPCMRequest::chunk() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline void StreamPCMRequest::set_chunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  _impl_.data_.chunk_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.chunk)
}
inline std::string* StreamPCMRequest::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.chunk)
  return _s;
}
inline const std::string& StreamPCMRequest::_internal_chunk() const {
  if (_internal_has_chunk()) {
    return _impl_.data_.chunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamPCMRequest::_internal_set_chunk(const std::string& value) {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  _impl_.data_.chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPCMRequest::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_data();
    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  return _impl_.data_.chunk_.Mutable(      GetArenaForAllocation());
}
inline std::string* StreamPCMRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_data();
    return _impl_.data_.chunk_.Release();
  } else {
    return nullptr;
  }
}
inline void StreamPCMRequest::set_allocated_chunk(std::string* chunk) {
  if (has_data()) {
    clear_data();
  }
  if (chunk != nullptr) {
    set_has_chunk();
    _impl_.data_.chunk_.InitAllocated(chunk, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.chunk)
}

// int32 vad = 3;
inline void StreamPCMRequest::clear_vad() {
  _impl_.vad_ = 0;
}
inline int32_t StreamPCMRequest::_internal_vad() const {
  return _impl_.vad_;
}
inline int32_t StreamPCMRequest::vad() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.vad)
  return _internal_vad();
}
inline void StreamPCMRequest::_internal_set_vad(int32_t value) {
  
  _impl_.vad_ = value;
}
inline void StreamPCMRequest::set_vad(int32_t value) {
  _internal_set_vad(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.vad)
}

inline bool StreamPCMRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void StreamPCMRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline StreamPCMRequest::DataCase StreamPCMRequest::data_case() const {
  return StreamPCMRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamPCMResponse

// string result = 1;
inline void StreamPCMResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& StreamPCMResponse::result() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamPCMResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:amd.StreamPCMResponse.result)
}
inline std::string* StreamPCMResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMResponse.result)
  return _s;
}
inline const std::string& StreamPCMResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void StreamPCMResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPCMResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamPCMResponse::release_result() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMResponse.result)
  return _impl_.result_.Release();
}
inline void StreamPCMResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMResponse.result)
}

// repeated string results = 2;
inline int StreamPCMResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int StreamPCMResponse::results_size() const {
  return _internal_results_size();
}
inline void StreamPCMResponse::clear_results() {
  _impl_.results_.Clear();
}
inline std::string* StreamPCMResponse::add_results() {
  std::string* _s = _internal_add_results();
  // @@protoc_insertion_point(field_add_mutable:amd.StreamPCMResponse.results)
  return _s;
}
inline const std::string& StreamPCMResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const std::string& StreamPCMResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMResponse.results)
  return _internal_results(index);
}
inline std::string* StreamPCMResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMResponse.results)
  return _impl_.results_.Mutable(index);
}
inline void StreamPCMResponse::set_results(int index, const std::string& value) {
  _impl_.results_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::set_results(int index, std::string&& value) {
  _impl_.results_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::set_results(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.results_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::set_results(int index, const char* value, size_t size) {
  _impl_.results_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:amd.StreamPCMResponse.results)
}
inline std::string* StreamPCMResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline void StreamPCMResponse::add_results(const std::string& value) {
  _impl_.results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::add_results(std::string&& value) {
  _impl_.results_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::add_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:amd.StreamPCMResponse.results)
}
inline void StreamPCMResponse::add_results(const char* value, size_t size) {
  _impl_.results_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:amd.StreamPCMResponse.results)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamPCMResponse::results() const {
  // @@protoc_insertion_point(field_list:amd.StreamPCMResponse.results)
  return _impl_.results_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamPCMResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:amd.StreamPCMResponse.results)
  return &_impl_.results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::amd::UploadStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amd::UploadStatusCode>() {
  return ::amd::UploadStatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_2eproto
